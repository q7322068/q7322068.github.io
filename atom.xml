<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>足迹|成长之路</title>
  
  <subtitle>实战经验梳理，分享与你，分享与自己！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.onecoderspace.com/"/>
  <updated>2017-10-04T11:31:41.000Z</updated>
  <id>http://www.onecoderspace.com/</id>
  
  <author>
    <name>杨文魁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring boot项目实战：分布式锁</title>
    <link href="http://www.onecoderspace.com/2017/10/04/spring-boot-distributed-lock/"/>
    <id>http://www.onecoderspace.com/2017/10/04/spring-boot-distributed-lock/</id>
    <published>2017-10-04T01:03:32.000Z</published>
    <updated>2017-10-04T11:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在部分情况下，要保证操作在整个集群内是同步的，以操作库存为例，多个减操作需要同步，常见的有两种方式：  </p><ol><li>采用类CAS的方式，先查询库存，然后使用update xxx set num=num-1 where num=:num;这样可保证库在本次修改之前未被修改；  </li><li>使用分布式锁，保证同时只有一个地方在修改库存。  <a id="more"></a>这里向大家展示一个基于redis的分布式锁。主要涉及三个类：  </li><li>DistributedLockUtil对外提供获取分布式锁的方法；  </li><li>DistributedLock 分布式锁接口，定义分布式锁支持的方法，主要有acquire和release；  </li><li>JedisLock实现DistributedLock接口，是基于redis的分布锁实现    ；</li></ol><p>需要使用StringRedisTemplate，如对spring boot整合redis不熟悉，请参考<a href="http://www.jianshu.com/p/8c9753c62d54" target="_blank" rel="external">spring boot项目实战：redis</a>.</p><h3 id="DistributedLock接口"><a href="#DistributedLock接口" class="headerlink" title="DistributedLock接口"></a>DistributedLock接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DistributedLock</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取锁</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2016年5月6日 上午11:02:54</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 释放锁</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2016年5月6日 上午11:02:59</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h3 id="JedisLock基于redis的分布式锁实现"><a href="#JedisLock基于redis的分布式锁实现" class="headerlink" title="JedisLock基于redis的分布式锁实现"></a>JedisLock基于redis的分布式锁实现</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisLock</span> <span class="keyword">implements</span> <span class="title">DistributedLock</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(JedisLock.class);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> StringRedisTemplate redisTemplate;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 分布式锁的键值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    String lockKey; <span class="comment">//锁的键值</span></div><div class="line">    <span class="keyword">int</span> expireMsecs  = <span class="number">10</span> * <span class="number">1000</span>; <span class="comment">//锁超时，防止线程在入锁以后，无限的执行等待</span></div><div class="line">    <span class="keyword">int</span>     timeoutMsecs = <span class="number">10</span> * <span class="number">1000</span>; <span class="comment">//锁等待，防止线程饥饿</span></div><div class="line">    <span class="keyword">boolean</span> locked = <span class="keyword">false</span>; <span class="comment">//是否已经获取锁</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取指定键值的锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁的键值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JedisLock</span><span class="params">(String lockKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.lockKey = lockKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取指定键值的锁,同时设置获取锁超时时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁的键值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutMsecs 获取锁超时时间</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JedisLock</span><span class="params">(String lockKey, <span class="keyword">int</span> timeoutMsecs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.lockKey = lockKey;</div><div class="line">        <span class="keyword">this</span>.timeoutMsecs = timeoutMsecs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取指定键值的锁,同时设置获取锁超时时间和锁过期时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁的键值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutMsecs 获取锁超时时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> expireMsecs 锁失效时间</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JedisLock</span><span class="params">(String lockKey, <span class="keyword">int</span> timeoutMsecs, <span class="keyword">int</span> expireMsecs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.lockKey = lockKey;</div><div class="line">        <span class="keyword">this</span>.timeoutMsecs = timeoutMsecs;</div><div class="line">        <span class="keyword">this</span>.expireMsecs = expireMsecs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getLockKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lockKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true if lock is acquired, false acquire timeouted</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">     *             in case of thread interruption</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> timeout = timeoutMsecs;</div><div class="line">        <span class="keyword">if</span>(redisTemplate == <span class="keyword">null</span>)&#123;</div><div class="line">        redisTemplate = SpringContextUtil.getBean(StringRedisTemplate.class);</div><div class="line">&#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">while</span> (timeout &gt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">long</span> expires = System.currentTimeMillis() + expireMsecs + <span class="number">1</span>;</div><div class="line">    String expiresStr = String.valueOf(expires); <span class="comment">//锁到期时间</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (redisTemplate.opsForValue().setIfAbsent(lockKey, expiresStr)) &#123;</div><div class="line">        <span class="comment">// lock acquired</span></div><div class="line">        locked = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String currentValueStr = redisTemplate.opsForValue().get(lockKey); <span class="comment">//redis里的时间</span></div><div class="line">    <span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</div><div class="line">        <span class="comment">//判断是否为空，不为空的情况下，如果被其他线程设置了值，则第二个条件判断是过不去的</span></div><div class="line">        <span class="comment">// lock is expired</span></div><div class="line"></div><div class="line">        String oldValueStr = redisTemplate.opsForValue().getAndSet(lockKey, expiresStr);</div><div class="line">        <span class="comment">//获取上一个锁到期时间，并设置现在的锁到期时间，</span></div><div class="line">        <span class="comment">//只有一个线程才能获取上一个线上的设置时间，因为jedis.getSet是同步的</span></div><div class="line">        <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</div><div class="line">            <span class="comment">//如过这个时候，多个线程恰好都到了这里，但是只有一个线程的设置值和当前值相同，他才有权利获取锁</span></div><div class="line">            <span class="comment">// lock acquired</span></div><div class="line">            locked = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    timeout -= <span class="number">100</span>;</div><div class="line">    Thread.sleep(<span class="number">100</span>);</div><div class="line">&#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">logger.<span class="keyword">error</span>(<span class="string">"release lock due to error"</span>,e);</div><div class="line">&#125; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 释放锁</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(redisTemplate == <span class="keyword">null</span>)&#123;</div><div class="line">         redisTemplate = SpringContextUtil.getBean(StringRedisTemplate.class);</div><div class="line"> &#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (locked) &#123;</div><div class="line">    String currentValueStr = redisTemplate.opsForValue().get(lockKey); <span class="comment">//redis里的时间</span></div><div class="line">    <span class="comment">//校验是否超过有效期，如果不在有效期内，那说明当前锁已经失效，不能进行删除锁操作</span></div><div class="line">    <span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &gt; System.currentTimeMillis()) &#123;</div><div class="line">    redisTemplate.delete(lockKey);</div><div class="line">locked = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">logger.<span class="keyword">error</span>(<span class="string">"release lock due to error"</span>,e);</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="DistributedLockUtil"><a href="#DistributedLockUtil" class="headerlink" title="DistributedLockUtil"></a>DistributedLockUtil</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLockUtil</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取分布式锁</span></div><div class="line"><span class="comment"> * 默认获取锁10s超时，锁过期时间60s</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2016年5月6日 下午1:30:46</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">DistributedLock <span class="title">getDistributedLock</span><span class="params">(String lockKey)</span></span>&#123;</div><div class="line">lockKey = assembleKey(lockKey);</div><div class="line">JedisLock lock = <span class="keyword">new</span> JedisLock(lockKey);</div><div class="line"><span class="keyword">return</span> lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 正式环境、测试环境共用一个redis时，避免key相同造成影响</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> lockKey</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function">String <span class="title">assembleKey</span><span class="params">(String lockKey)</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">return</span> String.<span class="title">format</span><span class="params">(<span class="string">"lock_%s"</span>,lockKey)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取分布式锁</span></div><div class="line"><span class="comment"> * 默认获取锁10s超时，锁过期时间60s</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2016年5月6日 下午1:38:32</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> lockKey</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> timeoutMsecs 指定获取锁超时时间</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">DistributedLock <span class="title">getDistributedLock</span><span class="params">(String lockKey,<span class="keyword">int</span> timeoutMsecs)</span></span>&#123;</div><div class="line">lockKey = assembleKey(lockKey);</div><div class="line">JedisLock lock = <span class="keyword">new</span> JedisLock(lockKey,timeoutMsecs);</div><div class="line"><span class="keyword">return</span> lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取分布式锁</span></div><div class="line"><span class="comment"> * 默认获取锁10s超时，锁过期时间60s</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwenkui</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2016年5月6日 下午1:40:04</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> lockKey 锁的key</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> timeoutMsecs 指定获取锁超时时间</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> expireMsecs 指定锁过期时间</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">DistributedLock <span class="title">getDistributedLock</span><span class="params">(String lockKey,<span class="keyword">int</span> timeoutMsecs,<span class="keyword">int</span> expireMsecs)</span></span>&#123;</div><div class="line">lockKey = assembleKey(lockKey);</div><div class="line">JedisLock lock = <span class="keyword">new</span> JedisLock(lockKey,expireMsecs,timeoutMsecs);</div><div class="line"><span class="keyword">return</span> lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DistributedLock <span class="keyword">lock</span> = DistributedLockUtil.getDistributedLock(key);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">lock</span>.acquire()) &#123;</div><div class="line"><span class="comment">//获取锁成功业务代码</span></div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 获取锁失败</span></div><div class="line"><span class="comment">//获取锁失败业务代码</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">lock</span> != <span class="literal">null</span>) &#123;</div><div class="line"><span class="keyword">lock</span>.release();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="实现原理简析"><a href="#实现原理简析" class="headerlink" title="实现原理简析"></a>实现原理简析</h3><p>主要是依赖redis的setnx和getset命令对时间进行操作，从而实现锁的功能。以下两个文章对分布式锁进行了极其明细的分析，会让你对分布式锁的认识更加清晰。<br>《<a href="http://url.cn/5U3429y" target="_blank" rel="external">基于Redis的分布式锁到底安全吗（上）？</a>》<br>《<a href="http://url.cn/5eDZp1M" target="_blank" rel="external">基于Redis的分布式锁到底安全吗（下）？</a>》</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>基于redis的分布式锁依赖于系统时钟，需要保证各个竞争者的时钟的一致性，否则会出现一个参与者获得锁，而另一个参与者的时钟判断其已过期，导致分布式锁失效；  </li><li>需要保证redis节点的高可用，建议使用哨兵机制；  </li><li>在使用分布式锁之前，考虑是否可以通过乐观锁或无锁解决并发同步问题，毕竟使用锁的代价很是比较高昂的；  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在部分情况下，要保证操作在整个集群内是同步的，以操作库存为例，多个减操作需要同步，常见的有两种方式：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用类CAS的方式，先查询库存，然后使用update xxx set num=num-1 where num=:num;这样可保证库在本次修改之前未被修改；  &lt;/li&gt;
&lt;li&gt;使用分布式锁，保证同时只有一个地方在修改库存。
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="分布式锁，redis" scheme="http://www.onecoderspace.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%8Credis/"/>
    
  </entry>
  
  <entry>
    <title>spring boot项目实战：JPA</title>
    <link href="http://www.onecoderspace.com/2017/10/03/spring-boot-jpa/"/>
    <id>http://www.onecoderspace.com/2017/10/03/spring-boot-jpa/</id>
    <published>2017-10-03T05:45:38.000Z</published>
    <updated>2017-10-03T13:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司的项目中很大一部分属于内部平台，所以对性能的要求没有那么高，开发速度反而更重要，因此在搭建基础框架时选择使用JPA，没有使用mybitis，当然其中也有一部分原因是之前一直使用hibernate，对mybitis不太熟悉^_^。<br><a id="more"></a></p><h3 id="一、配置JPA"><a href="#一、配置JPA" class="headerlink" title="一、配置JPA"></a>一、配置JPA</h3><p>1、添加maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- jpa --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div></pre></td></tr></table></figure></p><p>2、 添加数据库配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">spring.jpa.database = MYSQL</div><div class="line"><span class="comment"># Hibernate ddl auto (create, create-drop, update)</span></div><div class="line">spring.jpa.hibernate.ddl-auto = update</div><div class="line"><span class="comment"># Naming strategy</span></div><div class="line">spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy</div><div class="line"><span class="comment"># stripped before adding them to the entity manager)</span></div><div class="line">spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</div><div class="line"><span class="comment"># Show or not log for each sql query</span></div><div class="line">spring.jpa.show-sql = <span class="literal">true</span></div><div class="line">spring.datasource.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/base?characterEncoding=utf8</div><div class="line">spring.datasource.<span class="attribute">username</span>=root</div><div class="line">spring.datasource.<span class="attribute">password</span>=root</div><div class="line">spring.datasource.<span class="attribute">driverClassName</span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.<span class="attribute">max-active</span>=3</div><div class="line">spring.datasource.<span class="attribute">max-idle</span>=1</div><div class="line">spring.datasource.<span class="attribute">min-idle</span>=1</div><div class="line">spring.datasource.<span class="attribute">initial-size</span>=1</div><div class="line"></div></pre></td></tr></table></figure></p><p>3、dao继承上层类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span>  <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;</span>&#123;</div><div class="line"><span class="function">User <span class="title">findByUsernameAndDel</span><span class="params">(String username, <span class="keyword">int</span> del)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>,<span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt;,<span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>为了便于使用，提取了一个BaseDao，需要注意的是要在上层类上添加@ NoRepositoryBean注解。BaseDao继承JpaRepository和JpaSpecificationExecutor，JpaRepository提供了基本的crud等查询方法，JpaSpecificationExecutor提供了对复杂查询的支持。</p><p>完成了以上三步，已经可以在service内注入dao，通过dao进行数据库curd等操作。</p><h3 id="二、JPA查询"><a href="#二、JPA查询" class="headerlink" title="二、JPA查询"></a>二、JPA查询</h3><h4 id="1、-根据方法名实现查询"><a href="#1、-根据方法名实现查询" class="headerlink" title="1、 根据方法名实现查询"></a>1、 根据方法名实现查询</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据用户名和标记删除字段查询对应的用户信息</span></div><div class="line">User findByUsernameAndDel(<span class="built_in">String</span> username, <span class="built_in">int</span> del);</div><div class="line"></div><div class="line"><span class="comment">//根据code查询对应的角色</span></div><div class="line">Role findByCode(<span class="built_in">String</span> code);</div><div class="line"></div><div class="line"><span class="comment">//根据id集合查询对应的角色集合</span></div><div class="line"><span class="built_in">Set</span>&lt;Role&gt; findByIdIn(<span class="built_in">Set</span>&lt;Integer&gt; roleIds);</div><div class="line"></div><div class="line"><span class="comment">//根据用户id，查询用户角色关系记录</span></div><div class="line"><span class="built_in">List</span>&lt;UserRole&gt; findByUserId(<span class="built_in">int</span> uid);</div></pre></td></tr></table></figure><p>简单查询可以通过以上方式方便的实现，简化了很多dao层的代码，使用着还是很爽的，具体规则比较简单，基本上就是findBy开始，后续跟上实体属性，中间配以And、Or、In、like等组成方法名，也就是用方法名来描述查询规则。如果是嵌套对象，可以通过“_”来区分子对象的属性，比如findByCompany_name(String name)就是以子对象company内的name属性为查询条件。常用查询关键字如下：  </p><ul><li>And — 等价于 SQL 中的 and 关键字，比如findByUsernameAndPassword(String user, Striang pwd)；  </li><li>Or — 等价于 SQL 中的 or 关键字，比如findByUsernameOrAddress(String user, String addr)；  </li><li>Between — 等价于 SQL 中的 between 关键字，比如 findBySalaryBetween(int max, int min)；  </li><li>LessThan — 等价于 SQL 中的 “&lt;”，比如 findBySalaryLessThan(int max)；  </li><li>GreaterThan — 等价于 SQL 中的”&gt;”，比如 findBySalaryGreaterThan(int min)；  </li><li>IsNull — 等价于 SQL 中的 “is null”，比如 findByUsernameIsNull()；  </li><li>IsNotNull — 等价于 SQL 中的 “is not null”，比如 findByUsernameIsNotNull()；  </li><li>NotNull — 与 IsNotNull 等价；  </li><li>Like — 等价于 SQL 中的 “like”，比如 findByUsernameLike(String user)；  </li><li>NotLike — 等价于 SQL 中的 “not like”，比如 findByUsernameNotLike(String user)；  </li><li>OrderBy — 等价于 SQL 中的 “order by”，比如 findByUsernameOrderBySalaryAsc(String user)；  </li><li>Not — 等价于 SQL 中的 “！ =”，比如 findByUsernameNot(String user)；  </li><li>In — 等价于 SQL 中的 “in”，比如findByUsernameIn(Collection<string> userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；  </string></li><li>NotIn — 等价于 SQL 中的 “not in”，比如 findByUsernameNotIn(Collection<string> userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</string></li></ul><h4 id="2、使用-Query查询"><a href="#2、使用-Query查询" class="headerlink" title="2、使用@Query查询"></a>2、使用@Query查询</h4><p><strong>类HQL语句</strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u where u.username = ?1"</span>) </div><div class="line"><span class="keyword">public</span> <span class="function">AccountInfo <span class="title">findByAccountId</span><span class="params">(String username)</span></span>; </div><div class="line"></div></pre></td></tr></table></figure><br>在@Query内直接书写HQL语句即可，参数可通过”?1,?2”这样的方式设置，下标从1开始。</p><p><strong>原生sql查询</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="variable">@Query</span>(value=<span class="string">"select perm.* from role_permission rp left join permission perm on rp.permission_id=perm.id where rp.role_id in(?1);"</span>,nativeQuery=true)</div><div class="line">List&lt;Permission&gt; listByRoleIds(Set&lt;Integer&gt; roles);</div><div class="line"></div><div class="line"><span class="comment">//根据userId删除用户角色关系</span></div><div class="line"><span class="variable">@Query</span>(value = <span class="string">"delete from user_role where user_id=?1 "</span>, nativeQuery = true)  </div><div class="line"><span class="variable">@Modifying</span></div><div class="line">void deleleByUserId(int uid);</div><div class="line"></div></pre></td></tr></table></figure><br>使用也比较简单，将@Query内的nativeQuery设置为true即可。写SQL语句时，可以现在本地mysql客户端上测试号SQL语句的正确性，当需要索引时，创建合适的索引。在此基础上看下SQL的性能，如不理想，需调整SQL，可使用explain对SQL语句进行分析，查询执行逻辑，针对性优化。</p><p><strong>新增、修改</strong><br>直接调用dao的save方法，支持单个保存和批量保存。</p><p><strong>删除</strong><br>直接调用dao的delete方法，支持根据id、对象、对象集合等删除方式，使用时查看下提示方法就可以了。</p><h4 id="3、分页查询"><a href="#3、分页查询" class="headerlink" title="3、分页查询"></a>3、分页查询</h4><p><strong>不带条件分页查询</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Pageable pageable = new PageRequest(0, 10, new Sort(Direction.DESC, <span class="string">"updateTime"</span>));</div><div class="line">Page&lt;User&gt;<span class="built_in"> page </span>= userDao.findAll(pageable);</div></pre></td></tr></table></figure></p><ul><li>使用PageRequest构建分页请求对象，页码下标从0开始</li></ul><p><strong>多条件复杂分页查询</strong><br>带条件分页查询有两种方式：  </p><ol><li>使用原生SQL进行分页查询，但是前提是多个查询条件必须同时存在，不能有不生效的条件，比如用户列表，用户姓名可以不作为过滤条件，这种情况原生SQL就不适用了，需要使用下面第二种方式  </li><li>使用Specification进行复杂查询，示例代码如下：</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public Page&lt;User&gt; listByPage(<span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; params,Pageable pageable)&#123;</div><div class="line">Specification&lt;User&gt; spec = <span class="keyword">new</span> Specification&lt;User&gt;() &#123;  </div><div class="line"><span class="meta">@Override</span></div><div class="line">public Predicate toPredicate(Root&lt;User&gt; root,CriteriaQuery&lt;?&gt; query,CriteriaBuilder cb) &#123;</div><div class="line"><span class="built_in">List</span>&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;Predicate&gt;();  </div><div class="line"><span class="built_in">String</span> type = params.<span class="keyword">get</span>(<span class="string">"type"</span>);</div><div class="line"><span class="built_in">String</span> status= params.<span class="keyword">get</span>(<span class="string">"status"</span>);</div><div class="line"><span class="built_in">String</span> username = params.<span class="keyword">get</span>(<span class="string">"username"</span>);</div><div class="line"><span class="built_in">String</span> name = params.<span class="keyword">get</span>(<span class="string">"name"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(type))&#123;  </div><div class="line">        list.add(cb.equal(root.<span class="keyword">get</span>(<span class="string">"type"</span>).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), NumberUtils.toInt(type)));  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(status))&#123;  </div><div class="line">        list.add(cb.equal(root.<span class="keyword">get</span>(<span class="string">"status"</span>).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), NumberUtils.toInt(status)));  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;  </div><div class="line">        list.add(cb.like(root.<span class="keyword">get</span>(<span class="string">"username"</span>).<span class="keyword">as</span>(<span class="built_in">String</span>.<span class="keyword">class</span>), <span class="built_in">String</span>.format(<span class="string">"%%%s%%"</span>, username)));  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(name))&#123;  </div><div class="line">    list.add(cb.like(root.<span class="keyword">get</span>(<span class="string">"name"</span>).<span class="keyword">as</span>(<span class="built_in">String</span>.<span class="keyword">class</span>), <span class="built_in">String</span>.format(<span class="string">"%%%s%%"</span>, name)));   </div><div class="line">    &#125;</div><div class="line">    list.add(cb.equal(root.<span class="keyword">get</span>(<span class="string">"del"</span>), Constants.DEL_NO));</div><div class="line">    Predicate[] p = <span class="keyword">new</span> Predicate[list.size()];  </div><div class="line">    <span class="keyword">return</span> cb.and(list.toArray(p));  </div><div class="line"></div><div class="line"><span class="comment">//in条件查询</span></div><div class="line"><span class="comment">/*List&lt;Integer&gt; ids = Lists.newArrayList();</span></div><div class="line"><span class="comment">ids.add(1);</span></div><div class="line"><span class="comment">ids.add(2);</span></div><div class="line"><span class="comment">In&lt;Integer&gt; in = cb.in(root.get("id").as(Integer.class));</span></div><div class="line"><span class="comment">in.value(1);</span></div><div class="line"><span class="comment">in.value(2);</span></div><div class="line"><span class="comment">    return cb.or(in);*/</span></div><div class="line">&#125;  </div><div class="line">&#125;;  </div><div class="line">Page&lt;User&gt; page = userDao.findAll(spec, pageable);</div></pre></td></tr></table></figure><p>根据以上示例，基本满足了常用的查询需求，更多情况可根据规则尝试一下即可，也可百度搜索下JPA Specification，有很多教程。</p><p><strong>简化多条件分页查询</strong><br>使用Specification需要每次都写一大段模板代码，使用起来还是比较繁琐，使用入门也有些难度，基于此，在service层的公共代码出对查询进行了部分封装，简化常见多条件分页查询。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 分页多条件查询</span></div><div class="line"><span class="comment"> * 注：多个条件间是and关系 &amp; 参数是属性对应的类型</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwk</span></div><div class="line"><span class="comment"> * <span class="doctag">@time</span> 2017年8月1日 下午3:50:46</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> params &#123;"username:like":"test"&#125; 键的格式为字段名:过滤方式,过滤方式见&#123;<span class="doctag">@code</span> QueryTypeEnum&#125;</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> pageable 分页信息 new PageRequest(page, size,new Sort(Direction.DESC, "updateTime"))</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line">Page&lt;T&gt; list(Map&lt;String, Object&gt; params,Pageable pageable);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Page&lt;T&gt; list(<span class="keyword">final</span> Map&lt;String, Object&gt; params,Pageable pageable)&#123;</div><div class="line">Specification&lt;T&gt; spec = new Specification&lt;T&gt;() &#123;  </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Predicate toPredicate(Root&lt;T&gt; root,CriteriaQuery&lt;?&gt; query,CriteriaBuilder cb) &#123;</div><div class="line">List&lt;Predicate&gt; list = new ArrayList&lt;Predicate&gt;();</div><div class="line"><span class="keyword">for</span>(Entry&lt;String, Object&gt; entry : params.entrySet())&#123;</div><div class="line">Object value = entry.getValue();</div><div class="line"><span class="keyword">if</span>(value == <span class="literal">null</span> || StringUtils.isBlank(value.toString()))&#123;</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line">String key = entry.getKey();</div><div class="line">String[] arr = key.split(<span class="string">":"</span>);</div><div class="line">Predicate predicate = getPredicate(arr,value,root,cb);</div><div class="line">list.add(predicate);</div><div class="line">&#125;</div><div class="line">    Predicate[] p = new Predicate[list.size()];  </div><div class="line">    <span class="keyword">return</span> cb.and(list.toArray(p));  </div><div class="line">&#125;</div><div class="line">&#125;;  </div><div class="line">Page&lt;T&gt; page = getDAO().findAll(spec, pageable);</div><div class="line"><span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> Predicate getPredicate(String[] arr, Object value,</div><div class="line">Root&lt;T&gt; root, CriteriaBuilder cb) &#123;</div><div class="line"><span class="keyword">if</span>(arr.length == <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">return</span> cb.equal(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(value.getClass()), value);  </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.like.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> cb.like(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(String.<span class="keyword">class</span>), String.format(<span class="string">"%%%s%%"</span>, value));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.ne.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> cb.notEqual(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(value.getClass()), value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.lt.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> getLessThanPredicate(arr,value,root,cb);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.lte.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> getLessThanOrEqualToPredicate(arr,value,root,cb);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.gt.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> getGreaterThanPredicate(arr,value,root,cb);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(QueryTypeEnum.gte.name().equals(arr[<span class="number">1</span>]))&#123;</div><div class="line"><span class="keyword">return</span> getGreaterThanOrEqualToPredicate(arr,value,root,cb);</div><div class="line">&#125;</div><div class="line"><span class="keyword">throw</span> new UnsupportedOperationException(String.format(<span class="string">"不支持的查询类型[%s]"</span>,arr[<span class="number">1</span>]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Predicate getLessThanPredicate(String[] arr, Object value,</div><div class="line">Root&lt;T&gt; root, CriteriaBuilder cb) &#123;</div><div class="line"><span class="keyword">if</span>(Integer.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), (int)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Long</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Long</span>.<span class="keyword">class</span>), (long)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Double</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Double</span>.<span class="keyword">class</span>), (double)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Float</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Float</span>.<span class="keyword">class</span>), (float)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Timestamp.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Timestamp.<span class="keyword">class</span>), (Timestamp)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Date.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Date.<span class="keyword">class</span>), (Date)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> cb.lessThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(String.<span class="keyword">class</span>), String.valueOf(value));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Predicate getLessThanOrEqualToPredicate(String[] arr,</div><div class="line">Object value, Root&lt;T&gt; root, CriteriaBuilder cb) &#123;</div><div class="line"><span class="keyword">if</span>(Integer.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), (int)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Long</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Long</span>.<span class="keyword">class</span>), (long)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Double</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Double</span>.<span class="keyword">class</span>), (double)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Float</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Float</span>.<span class="keyword">class</span>), (float)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Timestamp.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Timestamp.<span class="keyword">class</span>), (Timestamp)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Date.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Date.<span class="keyword">class</span>), (Date)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(String.<span class="keyword">class</span>), String.valueOf(value));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Predicate getGreaterThanPredicate(String[] arr,</div><div class="line">Object value, Root&lt;T&gt; root, CriteriaBuilder cb) &#123;</div><div class="line"><span class="keyword">if</span>(Integer.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), (int)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Long</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Long</span>.<span class="keyword">class</span>), (long)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Double</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Double</span>.<span class="keyword">class</span>), (double)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Float</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Float</span>.<span class="keyword">class</span>), (float)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Timestamp.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Timestamp.<span class="keyword">class</span>), (Timestamp)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Date.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Date.<span class="keyword">class</span>), (Date)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> cb.greaterThan(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(String.<span class="keyword">class</span>), String.valueOf(value));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Predicate getGreaterThanOrEqualToPredicate(String[] arr,Object value,</div><div class="line">Root&lt;T&gt; root, CriteriaBuilder cb) &#123;</div><div class="line"><span class="keyword">if</span>(Integer.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Integer.<span class="keyword">class</span>), (int)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Long</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Long</span>.<span class="keyword">class</span>), (long)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Double</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Double</span>.<span class="keyword">class</span>), (double)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">Float</span>.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(<span class="built_in">Float</span>.<span class="keyword">class</span>), (float)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Timestamp.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Timestamp.<span class="keyword">class</span>), (Timestamp)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(Date.<span class="keyword">class</span> == value.getClass())&#123;</div><div class="line"><span class="keyword">return</span> cb.greaterThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(Date.<span class="keyword">class</span>), (Date)value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> cb.lessThanOrEqualTo(root.<span class="keyword">get</span>(arr[<span class="number">0</span>]).<span class="keyword">as</span>(String.<span class="keyword">class</span>), String.valueOf(value));</div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="meta">@ApiModel(value=<span class="meta-string">"查询条件支持的过滤方式"</span>)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> QueryTypeEnum &#123;</div><div class="line">like,</div><div class="line">equal,</div><div class="line">ne,</div><div class="line">lt,</div><div class="line">lte,</div><div class="line">gt,</div><div class="line">gte</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用示例</span></div><div class="line">Map&lt;String, Object&gt; params = Maps.newHashMap();</div><div class="line">params.put(<span class="string">"type"</span>, type);</div><div class="line">params.put(<span class="string">"status"</span>, status);</div><div class="line">params.put(<span class="string">"username:like"</span>, username);</div><div class="line">params.put(<span class="string">"name:like"</span>, name);</div><div class="line">Page&lt;User&gt; rs = <span class="keyword">this</span>.userService.list(params, new PageRequest(page, size, new Sort(Direction.DESC, <span class="string">"updateTime"</span>)));</div><div class="line"></div></pre></td></tr></table></figure><br>提前公共list方法，查询条件在map内设置，查询条件在key内设置，这样大部分的查询请求就可以不再关注Specification的语法，不用写那一大段的复杂代码了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>配置JPA很简单，添加maven依赖，配置数据库连接信息，dao继承上层类即可在service内注入dao，进行crud等操作</li><li>JPA提供了简便的根据方法名称进行查询的方式，使用难度很低</li><li>JPA通过@Query注解，支持类HQL语句查询；也可以使用原生SQL查询，只需要将nativeQuery属性设置为true即可</li><li>无条件分页查询可通过自带的findAll方法即可</li><li>多条件分页查询，有两种实现方式，当每个条件都是必选时，可使用@query带分页条件来实现；当有可选条件时，需要使用Specification来实现</li><li>为了简化常见的多个可选条件分页查询的代码，在service层提供了一个上层方法，以map的方式设置查询条件，大部分情况下不需要程序员再关注Specification的语法，降低使用难度</li></ol><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的项目中很大一部分属于内部平台，所以对性能的要求没有那么高，开发速度反而更重要，因此在搭建基础框架时选择使用JPA，没有使用mybitis，当然其中也有一部分原因是之前一直使用hibernate，对mybitis不太熟悉^_^。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="JPA" scheme="http://www.onecoderspace.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>git最简教程</title>
    <link href="http://www.onecoderspace.com/2017/10/03/git-simple/"/>
    <id>http://www.onecoderspace.com/2017/10/03/git-simple/</id>
    <published>2017-10-03T03:11:35.000Z</published>
    <updated>2017-10-03T13:50:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>git新手，最近上传个项目，下载个项目老是忘记命令，在这写一下最常用的几个命令。<br><a id="more"></a></p><ol><li>本地新建文件夹，如rest-base</li><li>cd rest-base</li><li>git init  //初始化仓库</li><li>git remote add origin git@github.com:q7322068/rest-base.git  //连接远程仓库，需要在github内创建ssh公钥，配置方式参考<a href="http://blog.csdn.net/fenghuibian/article/details/73350890" target="_blank" rel="external">GitHub添加公钥</a></li><li>如果配置远程仓库的地址错误，可以使用git remote rm origin</li><li>git pull origin master  //从远程库同步项目，如果远程项目和本地有冲突，可以在后面添加 –allow-unrelated-histories实现</li><li>git add .  //本地有修改，用该命令添加至暂存区</li><li>git commit -m ‘msg’  //将修改提交至本地git仓库</li><li>git push origin master  //将本地修改提交至远程仓库</li></ol><p>深入学习建议看<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰Git教程</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git新手，最近上传个项目，下载个项目老是忘记命令，在这写一下最常用的几个命令。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.onecoderspace.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot项目实战：shiro</title>
    <link href="http://www.onecoderspace.com/2017/10/02/spring-boot-shiro/"/>
    <id>http://www.onecoderspace.com/2017/10/02/spring-boot-shiro/</id>
    <published>2017-10-02T05:31:52.000Z</published>
    <updated>2017-10-04T11:42:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>有很长一段时间都觉得自己添加个filter，基于RBAC模型，就能很轻松的实现权限控制，没必要引入shiro，spring-security这样的框架增加系统的复杂度。事实上也的确这样，如果你的需求仅仅是控制用户能否访问某个url，使用框架和自己实现filter效果基本一致，区别在于使用shiro和spring-security能够提供更多的扩展，集成了很多实用的功能，整体结构更加规范。<br><a id="more"></a><br>shiro和spring-security有哪些更多功能，这里不再展开，感兴趣的同学可以自行百度，我们这里以shiro为例，讲述spring-boot项目如何整合shiro实现权限控制。  </p><h3 id="1、添加maven依赖"><a href="#1、添加maven依赖" class="headerlink" title="1、添加maven依赖"></a>1、添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--shiro-core --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!-- 整合ehcache，减少数据库查询次数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div></pre></td></tr></table></figure><h3 id="2、添加shiro配置"><a href="#2、添加shiro配置" class="headerlink" title="2、添加shiro配置"></a>2、添加shiro配置</h3><p>创建ShiroConfigration.java<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Configuration</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfigration</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final Logger logger = LoggerFactory.getLogger(ShiroConfigration.class);</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="type">LinkedHashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> SimpleCookie rememberMeCookie() &#123;</div><div class="line">        SimpleCookie simpleCookie = <span class="keyword">new</span> <span class="type">SimpleCookie</span>(<span class="string">"rememberMe"</span>);</div><div class="line">        simpleCookie.setMaxAge(<span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);<span class="comment">//保存10天</span></div><div class="line">        <span class="keyword">return</span> simpleCookie;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * cookie管理对象;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> CookieRememberMeManager rememberMeManager() &#123;</div><div class="line">        logger.debug(<span class="string">"ShiroConfiguration.rememberMeManager()"</span>);</div><div class="line">        CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> <span class="type">CookieRememberMeManager</span>();</div><div class="line">        cookieRememberMeManager.setCookie(rememberMeCookie());</div><div class="line">        cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"kPv59vyqzj00x11LXJZTjJ2UHW48jzHN"</span>));</div><div class="line">        <span class="keyword">return</span> cookieRememberMeManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Bean(name = <span class="string">"lifecycleBeanPostProcessor"</span>)</div><div class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">LifecycleBeanPostProcessor</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> FilterRegistrationBean filterRegistrationBean() &#123;</div><div class="line">        FilterRegistrationBean filterRegistration = <span class="keyword">new</span> <span class="type">FilterRegistrationBean</span>();</div><div class="line">        DelegatingFilterProxy proxy = <span class="keyword">new</span> <span class="type">DelegatingFilterProxy</span>(<span class="string">"shiroFilter"</span>);</div><div class="line">        <span class="comment">//  该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理</span></div><div class="line">        proxy.setTargetFilterLifecycle(<span class="literal">true</span>);</div><div class="line">        filterRegistration.setFilter(proxy);</div><div class="line"></div><div class="line">        filterRegistration.setEnabled(<span class="literal">true</span>);</div><div class="line">        <span class="comment">//filterRegistration.addUrlPatterns("/*");// 可以自己灵活的定义很多，避免一些根本不需要被Shiro处理的请求被包含进来</span></div><div class="line">        <span class="keyword">return</span> filterRegistration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> MyShiroRealm myShiroRealm() &#123;</div><div class="line">        MyShiroRealm myShiroRealm = <span class="keyword">new</span> <span class="type">MyShiroRealm</span>();</div><div class="line">        <span class="keyword">return</span> myShiroRealm;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Bean(name=<span class="string">"securityManager"</span>)  </div><div class="line">    <span class="keyword">public</span> DefaultWebSecurityManager securityManager() &#123;  </div><div class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> <span class="type">DefaultWebSecurityManager</span>();  </div><div class="line">        manager.setRealm(myShiroRealm()); </div><div class="line">        manager.setRememberMeManager(rememberMeManager());</div><div class="line">        manager.setCacheManager(ehCacheManager());  </div><div class="line">        <span class="keyword">return</span> manager;  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</span></div><div class="line"><span class="comment">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，以为在</span></div><div class="line"><span class="comment">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * Filter Chain定义说明</span></div><div class="line"><span class="comment">     * 1、一个URL可以配置多个Filter，使用逗号分隔</span></div><div class="line"><span class="comment">     * 2、当设置多个过滤器时，全部验证通过，才视为通过</span></div><div class="line"><span class="comment">     * 3、部分过滤器可指定参数，如perms，roles</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Bean(name = <span class="string">"shiroFilter"</span>)</div><div class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean getShiroFilterFactoryBean() &#123;</div><div class="line">        logger.debug(<span class="string">"ShiroConfigration.getShiroFilterFactoryBean()"</span>);</div><div class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> <span class="type">ShiroFilterFactoryBean</span>();</div><div class="line">        <span class="comment">// 必须设置 SecurityManager</span></div><div class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager());</div><div class="line">        </div><div class="line">        HashMap&lt;<span class="keyword">String</span>, javax.servlet.Filter&gt; loginFilter = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</div><div class="line">        loginFilter.put(<span class="string">"loginFilter"</span>, <span class="keyword">new</span> <span class="type">LoginFilter</span>());</div><div class="line">        shiroFilterFactoryBean.setFilters(loginFilter);</div><div class="line"></div><div class="line"></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/login/submit"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/img/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/test/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></div><div class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//配置记住我或认证通过可以访问的地址</span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/"</span>, <span class="string">"user"</span>);</div><div class="line">        <span class="comment">//未授权界面;</span></div><div class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/unauth"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"loginFilter"</span>);</div><div class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * shiro缓存管理器;</span></div><div class="line"><span class="comment">     * 需要注入对应的其它的实体类中：</span></div><div class="line"><span class="comment">     * 1、安全管理器：securityManager</span></div><div class="line"><span class="comment">     * 可见securityManager是整个shiro的核心；</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @return</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> EhCacheManager ehCacheManager() &#123;</div><div class="line">        EhCacheManager cacheManager = <span class="keyword">new</span> <span class="type">EhCacheManager</span>();</div><div class="line">        cacheManager.setCacheManagerConfigFile(<span class="string">"classpath:ehcache-shiro.xml"</span>);</div><div class="line">        <span class="keyword">return</span> cacheManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) &#123;</div><div class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> <span class="type">AuthorizationAttributeSourceAdvisor</span>();</div><div class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</div><div class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><p>shiroFilter是配置的重点，</p><ul><li>anon表示允许匿名访问</li><li>shiroFilterFactoryBean.setFilters(loginFilter)来设置自定义的过滤器，如本处设置了LoginFilter用于添加登录拦截</li><li>filterChainDefinitionMap.put(“/**”, “loginFilter”);用于指定loginFilter的作用范围</li></ul><h3 id="3、添加自定义realm"><a href="#3、添加自定义realm" class="headerlink" title="3、添加自定义realm"></a>3、添加自定义realm</h3><p>创建类MyShiroRealm.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">MyShiroRealm</span>.<span class="keyword">class</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> <span class="type">UserService</span> userService;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> <span class="type">UserRoleService</span> userRoleService;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> <span class="type">RoleService</span> roleService;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> <span class="type">RolePermissionService</span> rolePermissionService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="type">AuthenticationToken</span> token) <span class="keyword">throws</span> <span class="type">AuthenticationException</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//获取用户的输入的账号.</span></div><div class="line">        <span class="type">String</span> idObj = (<span class="type">String</span>) token.getPrincipal();</div><div class="line">        <span class="type">Integer</span> id = <span class="type">NumberUtils</span>.toInt(idObj);</div><div class="line">        <span class="type">User</span> user = userService.findById(id);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="comment">// 返回null的话，就会导致任何用户访问被拦截的请求时，都会自动跳转到unauthorizedUrl指定的地址</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="type">SimpleAuthenticationInfo</span> authenticationInfo = <span class="keyword">new</span> <span class="type">SimpleAuthenticationInfo</span>(user.getId(),</div><div class="line">                user.getPwd(), getName());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> authenticationInfo;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="type">AuthorizationInfo</span> doGetAuthorizationInfo(<span class="type">PrincipalCollection</span> principals) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment"> * 当没有使用缓存的时候，不断刷新页面的话，这个代码会不断执行，</span></div><div class="line"><span class="comment"> * 当其实没有必要每次都重新设置权限信息，所以我们需要放到缓存中进行管理；</span></div><div class="line"><span class="comment"> * 当放到缓存中时，这样的话，doGetAuthorizationInfo就只会执行一次了，</span></div><div class="line"><span class="comment"> * 缓存过期之后会再次执行。</span></div><div class="line"><span class="comment"> */</span></div><div class="line">        logger.debug(<span class="string">"权限配置--&gt;MyShiroRealm.doGetAuthorizationInfo()"</span>);</div><div class="line"></div><div class="line">        <span class="type">SimpleAuthorizationInfo</span> authorizationInfo = <span class="keyword">new</span> <span class="type">SimpleAuthorizationInfo</span>();</div><div class="line">        authorizationInfo.addRole(<span class="string">"ACTUATOR"</span>);</div><div class="line"></div><div class="line">        <span class="type">Integer</span> userId = <span class="type">Integer</span>.parseInt(principals.getPrimaryPrincipal().toString());</div><div class="line">        <span class="comment">//实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法</span></div><div class="line"></div><div class="line">        <span class="type">Set</span>&lt;<span class="type">Integer</span>&gt; roleIds = userRoleService.findRoleIds(userId);</div><div class="line">        <span class="type">Set</span>&lt;<span class="type">Role</span>&gt; roles = roleService.findByIds(roleIds);</div><div class="line">        <span class="keyword">for</span>(<span class="type">Role</span> role : roles)&#123;</div><div class="line">        authorizationInfo.addRole(role.getCode());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//设置权限信息.</span></div><div class="line">        <span class="type">List</span>&lt;<span class="type">Permission</span>&gt; permissions = rolePermissionService.getPermissions(roleIds);</div><div class="line">        <span class="type">Set</span>&lt;<span class="type">String</span>&gt; set = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;<span class="type">String</span>&gt;(permissions.size()*<span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="type">Permission</span> permission : permissions)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="type">StringUtils</span>.isNotBlank(permission.getCode()))&#123;</div><div class="line">        set.add(permission.getCode());</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        authorizationInfo.setStringPermissions(set);</div><div class="line">        <span class="keyword">return</span> authorizationInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><ul><li>doGetAuthenticationInfo用于验证用户账号信息，可根据具体业务来调整认证策略</li><li>doGetAuthorizationInfo用于获取用户拥有的角色和权限</li></ul><p>4、创建登录拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">Subject currentUser = SecurityUtils.getSubject();</div><div class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</div><div class="line">HttpServletRequest req = (HttpServletRequest) request;</div><div class="line">HttpServletResponse res = (HttpServletResponse) response;</div><div class="line">AjaxResponseWriter.write(req, res, ServiceStatusEnum.UNLOGIN, <span class="string">"请登录"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxResponseWriter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 写回数据到前端</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> status &#123;<span class="doctag">@link</span> ServiceStatusEnum&#125; </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> message 返回的描述信息</span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(HttpServletRequest request,HttpServletResponse response,ServiceStatusEnum status,String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">String contentType = <span class="string">"application/json"</span>;</div><div class="line">response.setContentType(contentType);</div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,request.getHeader(<span class="string">"Origin"</span>));</div><div class="line"></div><div class="line">Map&lt;String, String&gt; map = Maps.newLinkedHashMap();</div><div class="line">map.put(<span class="string">"code"</span>, status.code);</div><div class="line">map.put(<span class="string">"msg"</span>, message);</div><div class="line">String result = JacksonHelper.toJson(map);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">out.print(result);</div><div class="line">out.flush();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">out.close();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 全局性状态码</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yangwk</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ServiceStatusEnum &#123;</div><div class="line">UNLOGIN(<span class="string">"0001"</span>), <span class="comment">//未登录</span></div><div class="line">ILLEGAL_TOKEN(<span class="string">"0002"</span>),<span class="comment">//非法的token</span></div><div class="line">;</div><div class="line"><span class="keyword">public</span> String code;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">ServiceStatusEnum</span><span class="params">(String code)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.code = code;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><ul><li>用户登录状态拦截器，不允许匿名访问的url会经过该filter，如果未登录，则返回未登录提示（未登录处理可根据具体业务进行调整）</li></ul><h3 id="5、添加登录、退出功能"><a href="#5、添加登录、退出功能" class="headerlink" title="5、添加登录、退出功能"></a>5、添加登录、退出功能</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Api(value=<span class="string">"用户登录"</span>,tags=&#123;<span class="string">"用户登录"</span>&#125;)</div><div class="line">@RestController</div><div class="line"><span class="keyword">public</span> class LoginController &#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(LoginController.class);</div><div class="line"></div><div class="line">@Value(<span class="string">"$&#123;server.session.timeout&#125;"</span>)</div><div class="line"><span class="keyword">private</span> <span class="keyword">String</span> serverSessionTimeout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 用户登录接口 通过用户名和密码进行登录</span></div><div class="line"><span class="comment"> */</span></div><div class="line">@ApiOperation(value = <span class="string">"用户登录接口 通过用户名和密码进行登录"</span>, notes = <span class="string">"用户登录接口 通过用户名和密码进行登录"</span>)</div><div class="line">@ApiImplicitParams(&#123;</div><div class="line">@ApiImplicitParam(paramType = <span class="string">"query"</span>, name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, required = true, dataType = <span class="string">"String"</span>),</div><div class="line">@ApiImplicitParam(paramType = <span class="string">"query"</span>, name = <span class="string">"pwd"</span>, value = <span class="string">"密码"</span>, required = true, dataType = <span class="string">"String"</span>),</div><div class="line">@ApiImplicitParam(paramType = <span class="string">"query"</span>, name = <span class="string">"autoLogin"</span>, value = <span class="string">"自动登录"</span>, required = true, dataType = <span class="string">"boolean"</span>)&#125;)</div><div class="line">@RequestMapping(value = <span class="string">"/login/submit"</span>,method=&#123;RequestMethod.GET,RequestMethod.POST&#125;)</div><div class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; subm(HttpServletRequest request,HttpServletResponse response,</div><div class="line"><span class="keyword">String</span> username,<span class="keyword">String</span> pwd,@RequestParam(value = <span class="string">"autoLogin"</span>, defaultValue = <span class="string">"false"</span>) <span class="keyword">boolean</span> autoLogin) &#123;</div><div class="line">Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = Maps.newLinkedHashMap();</div><div class="line">Subject currentUser = SecurityUtils.getSubject();</div><div class="line">User user = userService.findByUsername(username);</div><div class="line"><span class="built_in">if</span> (user == null) &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"-1"</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"账号不存在"</span>);</div><div class="line"><span class="built_in">return</span> <span class="built_in">map</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">if</span> (user.getEnable() == <span class="number">0</span>) &#123; <span class="comment">//账号被禁用</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"-1"</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"账号已被禁用"</span>);</div><div class="line"><span class="built_in">return</span> <span class="built_in">map</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">String</span> salt = user.getSalt();</div><div class="line">UsernamePasswordToken token = null;</div><div class="line">Integer userId = user.getId();</div><div class="line">token = <span class="keyword">new</span> UsernamePasswordToken(userId.toString(),SaltMD5Util.encode(pwd, salt));</div><div class="line">token.setRememberMe(autoLogin);</div><div class="line"></div><div class="line">loginValid(<span class="built_in">map</span>, currentUser, token);</div><div class="line"></div><div class="line"><span class="comment">// 验证是否登录成功</span></div><div class="line"><span class="built_in">if</span> (currentUser.isAuthenticated()) &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>,<span class="string">"1"</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"ok"</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"id"</span>, <span class="keyword">String</span>.valueOf(userId));</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"username"</span>, user.getUsername());</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>, user.getName());</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"compnay_id"</span>, <span class="keyword">String</span>.valueOf(user.getCompanyId()));</div><div class="line"><span class="keyword">String</span> uuidToken = UUID.randomUUID().toString();</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"token"</span>, uuidToken);</div><div class="line"></div><div class="line">currentUser.getSession().<span class="built_in">setTimeout</span>(NumberUtils.toLong(serverSessionTimeout, <span class="number">1800</span>)*<span class="number">1000</span>);</div><div class="line">request.getSession().setAttribute(<span class="string">"token"</span>,uuidToken );</div><div class="line">&#125; <span class="built_in">else</span> &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"-1"</span>);</div><div class="line">token.<span class="built_in">clear</span>();</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> <span class="built_in">map</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@RequestMapping(value=<span class="string">"logout"</span>,method=RequestMethod.GET)</div><div class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; logout() &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = Maps.newLinkedHashMap();</div><div class="line">        Subject currentUser = SecurityUtils.getSubject();</div><div class="line">        currentUser.logout();</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"logout"</span>);</div><div class="line">        <span class="built_in">return</span> <span class="built_in">map</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">@RequestMapping(value=<span class="string">"unauth"</span>,method=RequestMethod.GET)</div><div class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; unauth() &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = Maps.newLinkedHashMap();</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>, <span class="string">"403"</span>);</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>, <span class="string">"你没有访问权限"</span>);</div><div class="line">        <span class="built_in">return</span> <span class="built_in">map</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> loginValid(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>,Subject currentUser, UsernamePasswordToken token) &#123;</div><div class="line"><span class="keyword">String</span> username = null;</div><div class="line"><span class="built_in">if</span> (token != null) &#123;</div><div class="line">username = (<span class="keyword">String</span>) token.getPrincipal();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">try</span> &#123;</div><div class="line"><span class="comment">// 在调用了login方法后,SecurityManager会收到AuthenticationToken,并将其发送给已配置的Realm执行必须的认证检查</span></div><div class="line"><span class="comment">// 每个Realm都能在必要时对提交的AuthenticationTokens作出反应</span></div><div class="line"><span class="comment">// 所以这一步在调用login(token)方法时,它会走到MyRealm.doGetAuthenticationInfo()方法中,具体验证方式详见此方法</span></div><div class="line">currentUser.login(token);</div><div class="line"><span class="built_in">return</span> true;</div><div class="line">&#125; <span class="built_in">catch</span> (UnknownAccountException | IncorrectCredentialsException ex) &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"账号或密码错误"</span>);</div><div class="line">&#125; <span class="built_in">catch</span> (LockedAccountException lae) &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>,<span class="string">"账户已锁定"</span>);</div><div class="line">&#125; <span class="built_in">catch</span> (ExcessiveAttemptsException eae) &#123;</div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"错误次数过多"</span>);</div><div class="line">&#125; <span class="built_in">catch</span> (AuthenticationException ae) &#123;</div><div class="line"><span class="comment">// 通过处理Shiro的运行时AuthenticationException就可以控制用户登录失败或密码错误时的情景</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"description"</span>, <span class="string">"登录失败"</span>);</div><div class="line">logger.warn(<span class="keyword">String</span>.format(<span class="string">"对用户[%s]进行登录验证..验证未通过"</span>, username),ae);</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Autowired</div><div class="line"><span class="keyword">private</span> UserService userService;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><ul><li>以上代码是比较通用的登录、退出功能，如果没有特殊需求，可直接使用上述功能</li></ul><h3 id="6、在接口上添加权限限制"><a href="#6、在接口上添加权限限制" class="headerlink" title="6、在接口上添加权限限制"></a>6、在接口上添加权限限制</h3><p>以UserController为例：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户详细信息"</span>, notes=<span class="meta-string">"根据ID查找用户"</span>)</span></div><div class="line">   <span class="meta">@ApiImplicitParam(paramType=<span class="meta-string">"query"</span>,name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true,dataType=<span class="meta-string">"int"</span>)</span></div><div class="line"><span class="meta">@RequiresPermissions(value=&#123;<span class="meta-string">"user:get"</span>&#125;)</span> </div><div class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/get"</span>,method=RequestMethod.GET)</span></div><div class="line"><span class="keyword">public</span> User <span class="keyword">get</span>(int id)&#123;</div><div class="line">User entity = userService.findById(id);</div><div class="line">entity.setPwd(<span class="literal">null</span>);</div><div class="line">entity.setSalt(<span class="literal">null</span>);</div><div class="line"><span class="keyword">return</span> entity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ApiOperation(value=<span class="meta-string">"修改密码"</span>, notes=<span class="meta-string">"修改密码"</span>)</span></div><div class="line"><span class="meta">@ApiImplicitParams(&#123;</span></div><div class="line"><span class="meta">@ApiImplicitParam(paramType = <span class="meta-string">"query"</span>, name = <span class="meta-string">"oldPwd"</span>, value = <span class="meta-string">"旧密码"</span>, required = true, dataType = <span class="meta-string">"String"</span>)</span>,</div><div class="line"><span class="meta">@ApiImplicitParam(paramType = <span class="meta-string">"query"</span>, name = <span class="meta-string">"pwd"</span>, value = <span class="meta-string">"新密码"</span>, required = true, dataType = <span class="meta-string">"String"</span>)</span>,</div><div class="line"><span class="meta">@ApiImplicitParam(paramType = <span class="meta-string">"query"</span>, name = <span class="meta-string">"confirmPwd"</span>, value = <span class="meta-string">"新密码(确认)"</span>, required = true, dataType = <span class="meta-string">"String"</span>)</span>&#125;)</div><div class="line"><span class="meta">@RequiresPermissions(value=&#123;<span class="meta-string">"user:reset-pwd"</span>&#125;)</span></div><div class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/reset-pwd"</span>,method=RequestMethod.POST)</span></div><div class="line"><span class="keyword">public</span> Return resetPwd(String oldPwd,String pwd,String confirmPwd)&#123;</div><div class="line"><span class="keyword">if</span>(StringUtils.isBlank(oldPwd) || StringUtils.isBlank(pwd)</div><div class="line">|| StringUtils.isBlank(confirmPwd) || !pwd.equals(confirmPwd)) &#123;</div><div class="line"><span class="keyword">return</span> Return.fail(<span class="string">"非法参数"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Subject currentUser = SecurityUtils.getSubject();</div><div class="line">Integer userId=(Integer) currentUser.getPrincipal();</div><div class="line">User entity = userService.findById(userId);</div><div class="line"><span class="keyword">if</span>(!entity.getPwd().equals(SaltMD5Util.encode(oldPwd, entity.getSalt())))&#123;</div><div class="line"><span class="keyword">return</span> Return.fail(<span class="string">"原始密码错误"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> userService.changePwd(entity,pwd);</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><ul><li>@RequiresPermissions 和 @RequiresRoles分别用于限制该方法可访问的权限和角色，两者如果同时使用，默认是“&amp;”关系；两者的value参数都可以设置为数组，数组元素间的关系可以通过logical属性来设置，有Logical.AND，Logical.OR两个值可选择</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>spring-boot整合shiro的步骤如下：</p><ol><li>添加maven依赖</li><li>添加ShiroConfigration配置，指定shiro的核心配置</li><li>添加MyShiroRealm，指定账户认证策略和角色权限获取方式</li><li>添加LoginFilter，即登录拦截器</li><li>添加登录、退出功能</li><li>通过注解添加接口调用权限限制</li></ol><p>权限控制基于RBAC模型，涉及的表有：用户（user)、角色（role）、用户角色关系（user_role）、权限（permission）、角色权限关系（role_permission），具体代码可参考github内的示例项目。  </p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很长一段时间都觉得自己添加个filter，基于RBAC模型，就能很轻松的实现权限控制，没必要引入shiro，spring-security这样的框架增加系统的复杂度。事实上也的确这样，如果你的需求仅仅是控制用户能否访问某个url，使用框架和自己实现filter效果基本一致，区别在于使用shiro和spring-security能够提供更多的扩展，集成了很多实用的功能，整体结构更加规范。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="权限控制" scheme="http://www.onecoderspace.com/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="shiro" scheme="http://www.onecoderspace.com/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>spring boot项目实战：redis</title>
    <link href="http://www.onecoderspace.com/2017/10/01/spring-boot-redis/"/>
    <id>http://www.onecoderspace.com/2017/10/01/spring-boot-redis/</id>
    <published>2017-10-01T10:47:10.000Z</published>
    <updated>2017-10-01T12:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>缓存是提升服务性能的一个重要手段，而redis是分布式缓存中的佼佼者，性能优异，官方提供哨兵机制保证高可用，也支持集群方式，保证对大数据量的支持，项目内引入redis还是很有帮助的。<br><a id="more"></a></p><h4 id="1、-添加maven依赖"><a href="#1、-添加maven依赖" class="headerlink" title="1、 添加maven依赖"></a>1、 添加maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- redis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>    <h4 id="2、-添加redis配置"><a href="#2、-添加redis配置" class="headerlink" title="2、 添加redis配置"></a>2、 添加redis配置</h4><h5 id="本地（单点redis）"><a href="#本地（单点redis）" class="headerlink" title="本地（单点redis）"></a>本地（单点redis）</h5><p>在application-local.properties（本地配置）内添加redis配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###redis配置###</span></div><div class="line">spring.redis.<span class="attribute">host</span>=127.0.0.1    </div><div class="line">spring.redis.<span class="attribute">port</span>=7001  </div><div class="line">spring.redis.<span class="attribute">database</span>=0</div><div class="line">spring.redis.<span class="attribute">password</span>=pwd</div><div class="line"></div><div class="line"><span class="comment"># pool settings ...池配置    </span></div><div class="line">spring.redis.pool.<span class="attribute">max-idle</span>=4</div><div class="line">spring.redis.pool.<span class="attribute">min-idle</span>=1</div><div class="line">spring.redis.pool.<span class="attribute">max-active</span>=4</div><div class="line">spring.redis.pool.<span class="attribute">max-wait</span>=2000</div></pre></td></tr></table></figure><br>如果本地redis没有密码，删除spring.redis.password这行就可以了。</p><h5 id="测试-amp-正式环境（哨兵）"><a href="#测试-amp-正式环境（哨兵）" class="headerlink" title="测试&amp;正式环境（哨兵）"></a>测试&amp;正式环境（哨兵）</h5><p>在application-dev.properties（测试环境）和application-prod.properties（正式环境）内添加redis配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">###redis配置###</span></div><div class="line">spring.redis.<span class="attribute">database</span>=0</div><div class="line">spring.redis.<span class="attribute">password</span>=pwd</div><div class="line">  </div><div class="line"><span class="comment"># pool settings ...池配置    </span></div><div class="line">spring.redis.pool.<span class="attribute">max-idle</span>=4</div><div class="line">spring.redis.pool.<span class="attribute">min-idle</span>=1</div><div class="line">spring.redis.pool.<span class="attribute">max-active</span>=4</div><div class="line">spring.redis.pool.<span class="attribute">max-wait</span>=2000</div><div class="line">  </div><div class="line"><span class="comment">#哨兵监听redis server名称  </span></div><div class="line">spring.redis.sentinel.<span class="attribute">master</span>=mymaster</div><div class="line"><span class="comment">#哨兵的配置列表  </span></div><div class="line">spring.redis.sentinel.<span class="attribute">nodes</span>=host:port,host2:port2</div></pre></td></tr></table></figure>    </p><h4 id="3、使用StringRedisTemplate进行操作"><a href="#3、使用StringRedisTemplate进行操作" class="headerlink" title="3、使用StringRedisTemplate进行操作"></a>3、使用StringRedisTemplate进行操作</h4><p>注入StringRedisTemplate：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</div></pre></td></tr></table></figure><br>使用RedisTemplate进行操作：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置缓存，建议每个键都设置过期时间</span></div><div class="line">redisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">"test"</span>, <span class="string">"test"</span>, <span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line"><span class="comment">//获取缓存值</span></div><div class="line"><span class="built_in">String</span> value = redisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">"test"</span>);</div><div class="line"></div><div class="line"><span class="comment">//删除某个键</span></div><div class="line">redisTemplate.delete(<span class="string">"test"</span>);</div><div class="line"></div><div class="line"><span class="comment">//操作set</span></div><div class="line">redisTemplate.opsForSet().add(<span class="string">"testSet"</span>, <span class="string">"1"</span>);</div><div class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; members = redisTemplate.opsForSet().members(<span class="string">"testSet"</span>);<span class="comment">//获取set内的所有值</span></div><div class="line">redisTemplate.opsForSet().remove(<span class="string">"testSet"</span>, <span class="string">"1"</span>,<span class="string">"2"</span>);<span class="comment">//移除set内的多个对象</span></div><div class="line"></div><div class="line"><span class="comment">//操作list</span></div><div class="line">redisTemplate.opsForList().rightPush(<span class="string">"testList"</span>, <span class="string">"1"</span>);</div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = redisTemplate.opsForList().range(<span class="string">"testList"</span>, <span class="number">0</span>, <span class="number">-1</span>);<span class="comment">//获取list内的所有元素</span></div></pre></td></tr></table></figure><br>StringRedisTemplate对redis操作进行了很好的封装，为键、字符串、哈希、列表、集合、有序集合、HyperLogLog的操作提供了良好的支持。基本使用形式就是redisTemplate.opsForXXX,XXX是类型，opsForValue是操作字符串；opsForSet是操作集合，opsForList是操作列表，opsForZSet是操作有序集合，opsForHyperLogLog是操作HyperLogLog，基本上其方法和redis命令是对应的，可以根据名字和方法注释快速确定方法对应的redis命令。</p><h4 id="4、使用RedisTemplate进行操作"><a href="#4、使用RedisTemplate进行操作" class="headerlink" title="4、使用RedisTemplate进行操作"></a>4、使用RedisTemplate进行操作</h4><p>1、 创建RedisObjectSerializer.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</div><div class="line"><span class="keyword">import</span> org.springframework.core.serializer.support.DeserializingConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.core.serializer.support.SerializingConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisObjectSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> Converter&lt;Object, <span class="keyword">byte</span>[]&gt; serializer = <span class="keyword">new</span> SerializingConverter();</div><div class="line"><span class="keyword">private</span> Converter&lt;<span class="keyword">byte</span>[], Object&gt; deserializer = <span class="keyword">new</span> DeserializingConverter();</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] EMPTY_ARRAY = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (isEmpty(bytes)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="function"><span class="keyword">return</span> deserializer.<span class="title">convert</span><span class="params">(bytes)</span></span>;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Cannot deserialize"</span>, ex);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</div><div class="line"><span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="function"><span class="keyword">return</span> serializer.<span class="title">convert</span><span class="params">(object)</span></span>;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line"><span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>2、 配置redisTemplate<br>创建RedisConfig.java<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate(RedisConnectionFactory <span class="keyword">factory</span>) &#123;</div><div class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; template = <span class="keyword">new</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;();</div><div class="line">        template.setConnectionFactory(<span class="keyword">factory</span>);</div><div class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</div><div class="line">        template.setValueSerializer(<span class="keyword">new</span> RedisObjectSerializer());</div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>3、 使用RedisTemplate<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//注入RedisTemplate对象</div><div class="line">@Autowired</div><div class="line">private RedisTemplate<span class="variable">&lt;String, Object&gt;</span> objRedisTemplate;</div><div class="line"></div><div class="line">//使用RedisTemplate</div><div class="line">User <span class="keyword">user</span> = new User();</div><div class="line"><span class="keyword">user</span>.<span class="built_in">set</span>Id(<span class="number">1</span>);</div><div class="line"><span class="keyword">user</span>.<span class="built_in">set</span>Name(<span class="string">"test"</span>);</div><div class="line">objRedisTemplate.opsForValue().<span class="built_in">set</span>(<span class="string">"user"</span>, <span class="keyword">user</span>,<span class="number">10</span>,TimeUnit.SECONDS);</div><div class="line"><span class="keyword">user</span> = (User) objRedisTemplate.opsForValue().get(<span class="string">"user"</span>);</div></pre></td></tr></table></figure>        </p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缓存是提升服务性能的一个重要手段，而redis是分布式缓存中的佼佼者，性能优异，官方提供哨兵机制保证高可用，也支持集群方式，保证对大数据量的支持，项目内引入redis还是很有帮助的。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="redis" scheme="http://www.onecoderspace.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot项目实战：共享session</title>
    <link href="http://www.onecoderspace.com/2017/10/01/spring-boot-spring-session/"/>
    <id>http://www.onecoderspace.com/2017/10/01/spring-boot-spring-session/</id>
    <published>2017-10-01T01:42:04.000Z</published>
    <updated>2017-10-04T11:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中会遇到以下几个场景：  </p><ol><li>发布新功能或修复bug，服务重启，用户需要重新登录  </li><li>当集群内某个节点失效时，用户明明刚登录，仍被提示需要重新登录<br>那如何做到服务发布、集群节点失效对用户无感知呢？有以下几种方式：  </li><li>使用cookie保存用户状态信息  </li><li>session同步法（多个web-server之间相互同步session）</li><li>后端统一存储（如：redis）<a id="more"></a> 关于这几种方法的优缺点这里不再展开，可参看阅读《<a href="http://mp.weixin.qq.com/s/NnnqVrC9-Jekwy3Opmvy_w" target="_blank" rel="external">session一致性架构设计实践</a>》,讲的很透彻，调理清晰。我们重点来看下如何通过后端统一存储来实现session共享，通过查找，发现了一个比较好的方案，spring-session，整合特别简单。<h3 id="1、在项目内引入redis"><a href="#1、在项目内引入redis" class="headerlink" title="1、在项目内引入redis"></a>1、在项目内引入redis</h3>参考我之前的一篇文档《<a href="http://www.jianshu.com/u/1182bf416662" target="_blank">spring boot项目实战：redis</a>》，这里不再展开。</li></ol><h3 id="2、添加maven依赖"><a href="#2、添加maven依赖" class="headerlink" title="2、添加maven依赖"></a>2、添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3、添加java配置"><a href="#3、添加java配置" class="headerlink" title="3、添加java配置"></a>3、添加java配置</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="variable">@Configuration</span></div><div class="line">   <span class="variable">@EnableRedisHttpSession</span>(maxInactiveIntervalInSeconds=<span class="number">7200</span>,redisNamespace=<span class="string">"base"</span>)</div><div class="line">public class RedisSessionConfig &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>maxInactiveIntervalInSeconds用于设置session有效时间</li><li>redisNamespace用于区分不同的项目，如果多个项目共用用户数据，可以采用相同的值，这样就简单的实现了统一登录效果</li></ul><p>要提醒的一点是如果用户数据特别大，需要注意redis容量规范及数据库规范，尽量保证缓存键分类存储在不同的库内，如用户session数据存储在数据库1内，业务缓存存储在0内，以此类推。</p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中会遇到以下几个场景：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发布新功能或修复bug，服务重启，用户需要重新登录  &lt;/li&gt;
&lt;li&gt;当集群内某个节点失效时，用户明明刚登录，仍被提示需要重新登录&lt;br&gt;那如何做到服务发布、集群节点失效对用户无感知呢？有以下几种方式：  &lt;/li&gt;
&lt;li&gt;使用cookie保存用户状态信息  &lt;/li&gt;
&lt;li&gt;session同步法（多个web-server之间相互同步session）&lt;/li&gt;
&lt;li&gt;后端统一存储（如：redis）
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="spring-session" scheme="http://www.onecoderspace.com/tags/spring-session/"/>
    
      <category term="共享session" scheme="http://www.onecoderspace.com/tags/%E5%85%B1%E4%BA%ABsession/"/>
    
  </entry>
  
  <entry>
    <title>spring boot项目实战：swagger2在线文档</title>
    <link href="http://www.onecoderspace.com/2017/10/01/spring-boot-swagger2/"/>
    <id>http://www.onecoderspace.com/2017/10/01/spring-boot-swagger2/</id>
    <published>2017-10-01T00:06:04.000Z</published>
    <updated>2017-10-01T12:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于接口服务来说接口文档极其重要，在团队配合和后续维护中占据重要角色。在工作中，使用过excel，wiki来进行接口文档的维护：<br><a id="more"></a></p><ul><li>wiki：缺点是维护起来工作量较大，费时较长，优点是体验较好、检索方便、支持多人协作、支持历史版本查看；  </li><li>excel：初始整理时还好，但在后续多人协作新增功能或调整接口时，维护接口文档就变得极不方便  </li></ul><p>然后了解到swagger2，可以以编程的方式方便的生成在线文档，这样在接口调整时，能够及时的变更接口文档，使接口文档的准确性更高，下面来看下如何在spring boot项目内整合swagger2.</p><h3 id="配置swagger2"><a href="#配置swagger2" class="headerlink" title="配置swagger2"></a>配置swagger2</h3><p><strong>1、 添加依赖</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- swagger2 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><br><strong>2、 添加基本配置</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Configuration</span></div><div class="line"><span class="variable">@EnableSwagger2</span></div><div class="line">public class Swagger2 &#123;</div><div class="line"></div><div class="line"><span class="variable">@Bean</span></div><div class="line">public Docket createRestApi() &#123;</div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</div><div class="line"><span class="selector-class">.apiInfo</span>(apiInfo())</div><div class="line"><span class="selector-class">.select</span>()</div><div class="line"><span class="selector-class">.apis</span>(RequestHandlerSelectors</div><div class="line">.basePackage(<span class="string">"com.onecoderspace.controller"</span>))</div><div class="line"><span class="selector-class">.paths</span>(PathSelectors.any())<span class="selector-class">.build</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</div><div class="line"><span class="selector-class">.title</span>(<span class="string">"spring boot示例接口API"</span>)</div><div class="line"><span class="selector-class">.description</span>(<span class="string">"spring boot示例接口API"</span>)</div><div class="line"><span class="selector-class">.version</span>(<span class="string">"1.0"</span>)<span class="selector-class">.build</span>();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>通过@Configuration注解和@EnableSwagger2注解来启用Swagger2</li><li>basePackage：配置Swagger2需要扫描的包</li></ul><p><strong>3、 使用示例</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Api</span>(tags=<span class="string">"用户管理"</span>,description=<span class="string">"UserController"</span>)</div><div class="line"><span class="variable">@RestController</span></div><div class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line">public class UserController &#123;</div><div class="line"></div><div class="line"><span class="variable">@ApiOperation</span>(value = <span class="string">"用户申请审核"</span>, notes = <span class="string">"用户申请审核"</span>)</div><div class="line"><span class="variable">@RequestMapping</span>(value=<span class="string">"/apply/audit"</span>,method=RequestMethod.GET)</div><div class="line">public Return applyAudit() &#123;</div><div class="line"></div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">Return</span><span class="selector-class">.success</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="selector-tag">ApiOperation</span>(value = <span class="string">"获取用户详细信息"</span>, notes = <span class="string">"根据ID查找用户"</span>)</div><div class="line">@<span class="selector-tag">ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, required = true, dataType = <span class="string">"String"</span>)</div><div class="line">@<span class="selector-tag">RequestMapping</span>(value = <span class="string">"/get"</span>, method = RequestMethod.GET)</div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">User</span> <span class="selector-tag">get</span>(String username) &#123;</div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="selector-tag">ApiOperation</span>(value = <span class="string">"修改用户信息"</span>, notes = <span class="string">"修改用户信息"</span>)</div><div class="line">@<span class="selector-tag">ApiImplicitParams</span>(&#123;</div><div class="line"><span class="variable">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"user"</span>, value = <span class="string">"用户实体"</span>, required = true, dataType = <span class="string">"user"</span>),</div><div class="line"><span class="variable">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"cname"</span>, value = <span class="string">"公司名称"</span>, required = true, dataType = <span class="string">"String"</span>) &#125;)</div><div class="line">@<span class="selector-tag">RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.POST)</div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">Return</span> <span class="selector-tag">save</span>(User user, String cname, String curl) &#123;</div><div class="line"></div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">Return</span><span class="selector-class">.success</span>();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>在线文档显示效果如下：<br><img src="http://owxkafu91.bkt.clouddn.com/swagger2.png" alt="swagger2在线文档效果"></p><ul><li>@Api:在类上添加注释，tags属性决定1处的内容，description决定2处的内容  </li><li>@ApiOperation：在方法上添加注释，用于说明某个请求url的作用，value属性决定3处的内容，notes决定5处的内容  </li><li>@ApiImplicitParam： 在方法上添加注释，用于说明某个请求参数的作用  </li><li>@ApiImplicitParams多个参数时使用该注解</li><li>在实体字段添加@ApiModelProperty(value=”名称”)，生成该字段的说明</li></ul><p><strong>4、 注意事项</strong>  </p><ol><li><strong>如果系统加入shiro等权限框架，那么访问swagger-ui.html需要有ACTUATOR角色，这个不要忘了配置</strong>  </li><li>对于实体参数的支持不太好，保存更新时如果字段不是很多，建议使用属性的方式替代使用实体  </li><li>swagger2是支持自定义页面的，如果觉得默认的样式不太适合，可以自定义前端页面，通过网络监控可以发现，所有数据是通过一个/v2/api-docs的请求获得的。</li></ol><p>当接口较多时，swagger2也支持分组等配置，参考以下文档：<br><a href="http://blog.didispace.com/spring-boot-starter-swagger-1.3.0/" target="_blank" rel="external">spring-boot-starter-swagger 1.3.0.RELEASE：新增对JSR-303的支持和host的配置</a>  </p><p>相关阅读：<br><a href="https://swagger.io/" target="_blank" rel="external">swagger官网</a><br><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="external">Spring Boot中使用Swagger2构建强大的RESTful API文档</a><br><a href="http://blog.didispace.com/spring-boot-starter-swagger-1.1.0/" target="_blank" rel="external">简化Swagger使用的自制Starter：spring-boot-starter-swagger，欢迎使用和吐槽</a></p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于接口服务来说接口文档极其重要，在团队配合和后续维护中占据重要角色。在工作中，使用过excel，wiki来进行接口文档的维护：&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="swagger2" scheme="http://www.onecoderspace.com/tags/swagger2/"/>
    
      <category term="在线接口文档" scheme="http://www.onecoderspace.com/tags/%E5%9C%A8%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>spring boot项目实战：异常处理</title>
    <link href="http://www.onecoderspace.com/2017/10/01/spring-boot-exception/"/>
    <id>http://www.onecoderspace.com/2017/10/01/spring-boot-exception/</id>
    <published>2017-10-01T00:04:58.000Z</published>
    <updated>2017-10-01T12:38:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>异常处理是一个比较基础而又重要的技能点，在团队内最好形成一个统一的规则，避免团队成员不断掉进前辈已经爬出来的坑中。<br><a id="more"></a></p><h3 id="1、全局异常处理"><a href="#1、全局异常处理" class="headerlink" title="1、全局异常处理"></a>1、全局异常处理</h3><p>spring boot支持配置全局异常处理，记录未捕获的全局异常，这样方便在问题发生时快速定位问题，配置方式如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GlobalDefaultExceptionHandler</span> </span>&#123;</div><div class="line">private <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(GlobalDefaultExceptionHandler.<span class="keyword">class</span>);</div><div class="line"></div><div class="line"><span class="meta">@ExceptionHandler</span>(value = Exception.<span class="keyword">class</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line">public <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; defaultErrorHandler(HttpServletRequest req,HttpServletResponse response, Exception e) &#123;</div><div class="line">logger.error(<span class="string">"defaultErrorHandler:"</span>, e);</div><div class="line">response.setStatus(<span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;();</div><div class="line">map.put(<span class="string">"code"</span>, <span class="string">"-1000"</span>);</div><div class="line">map.put(<span class="string">"msg"</span>, <span class="string">"系统繁忙"</span>);</div><div class="line"><span class="keyword">return</span> map;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>在类上添加@ControllerAdvice注释</li><li>根据异常类型创建不同的方法，在方法上添加@ExceptionHandler注解，value的值是具体的异常类型</li><li>defaultErrorHandler方法的返回值可以是String（view路径),Map(json结构，需添加@ResponseBody注解)</li><li><strong>response状态需要设置，否则前端看到的会是正常的200</strong>，根据具体的异常来设置，如无权限返回403等，两种设置方式，response.setStatus(500) 或者 @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR)注解</li></ol><h3 id="2、for、while循环异常处理"><a href="#2、for、while循环异常处理" class="headerlink" title="2、for、while循环异常处理"></a>2、for、while循环异常处理</h3><p>在for、while循环内是否需要进行异常捕获应该根据循环体的业务来确定，<strong>当一次循环过程中发生异常时，是否要终止循环，这是你使用循环时不能忽略的一点。</strong>  </p><p>如以下场景：  </p><ol><li>APP批量上传用户启动、使用事件，循环将每条数据处理后放入kafka队列：<strong>每次循环都是一个独立的处理过程，一次循环发生异常时不希望终止整个循环，</strong>类似的场景循环内部就需要进行异常捕获，从而避免一条数据的异常导致整批数据一起失败；  </li><li>批量删除用户，全部成功，否则回滚：业务需求是整个批次的数据全部成功，一个失败整体失败，那么就不需要在循环体内部进行异常捕获了，可以在循环体外或依赖全局异常处理来记录异常信息；</li></ol><p>在循环内部捕获异常，<strong>特别是while循环时，要注意循环终止条件，不要出现无限循环记录日志，导致磁盘写满的情况</strong>。</p><h3 id="3、代码段异常处理"><a href="#3、代码段异常处理" class="headerlink" title="3、代码段异常处理"></a>3、代码段异常处理</h3><p>完成一件事情，需要执行很多步处理，编程时我们通常使用一个空行来分割不同的“步”以使程序看起来更有调理，每一步的操作可以定义为一个粗粒度的“代码段”。一个代码段是否需要进行异常捕获，同样是有代码的业务来确定，<strong>当异常发生时，是否需要终止整个处理流程是判断的标准。</strong>  </p><p>如以下场景：  </p><ol><li>用户调用A接口，接口A包含三个代码段，参数校验-&gt;请求信息放入kafka-&gt;返回请求结果：第二步“请求信息放入kafka”对整个接口来说属于附加操作，当它发生异常时不应该影响用户正常获取数据，故此该代码段需要添加异常捕获，避免非核心业务的异常影响核心业务的执行。</li><li>用户调用B接口，接口B包含是哪个代码段，参数校验-&gt;创建用户信息—&gt;创建用户账号信息,第二步和第三步任何一个发生异常，都会导致整个操作失败，这种场景就不能单纯的捕获异常，那样会导致数据的不一致。</li></ol><h3 id="4、异常日志记录"><a href="#4、异常日志记录" class="headerlink" title="4、异常日志记录"></a>4、异常日志记录</h3><p>异常日志要记录在日志文件内，一定不要简单的将日志打印到控制台（测试环境一个tomcat放了十几个项目，如果都打印到控制台…）,在项目后期可以全局搜索System.out和System.err，并向对应人员指出。spring boot内建议使用logback作为日志组件，日志的使用可参考<a href="http://www.jianshu.com/p/284ba755052d" target="_blank" rel="external">sprign boot项目实战:日志</a>;</p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><ol><li>项目内建议配置全局异常捕获，有利于问题排查；</li><li>单次循环发生异常是否应该终止循环？不要忽略这个的问题；</li><li>注意循环终止条件，避免出现无限循环记录日志的情况</li><li>一个代码段发生异常是否要终止整个处理流程？同样不要忽略这个问题；</li><li>异常日志最好记录在日志文件内，不要简单的打印到控制台</li></ol><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常处理是一个比较基础而又重要的技能点，在团队内最好形成一个统一的规则，避免团队成员不断掉进前辈已经爬出来的坑中。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="异常处理" scheme="http://www.onecoderspace.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>boot项目实战：事务</title>
    <link href="http://www.onecoderspace.com/2017/10/01/spring-boot-transaction/"/>
    <id>http://www.onecoderspace.com/2017/10/01/spring-boot-transaction/</id>
    <published>2017-10-01T00:04:38.000Z</published>
    <updated>2017-10-01T12:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>事务在项目里也是不可或缺的一部分，建议形成一个统一的事务管理规范，不要出现让程序员根据业务自行添加，团队成员能力有高有低，很容易就出现需要事务时没添加事务，这种问题又很难测试出来，运行时却会不定时出现数据的不一致。<br><a id="more"></a><br>想实现类似原spring项目里通过aop方式配置事务的效果，各种尝试，目前还未找到十分可行的方式。测试可用的事务配置方式有两种：在service上添加@Transactional注解 和 引入xml配置文件（不推荐），<strong>建议使用@Transactional注解来进行事务配置。</strong></p><h3 id="1、-Transactional实现事务"><a href="#1、-Transactional实现事务" class="headerlink" title="1、@Transactional实现事务"></a>1、@Transactional实现事务</h3><p>spring boot项目内使用事务最简单直接的方式就是在每个service类上添加@Transactional注解，即可自动开启对事务的支持，不需要进行额外操作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">Transactional</span>(<span class="keyword">isolation</span>=<span class="keyword">Isolation</span>.<span class="keyword">REPEATABLE_READ</span>,<span class="keyword">propagation</span>=<span class="keyword">Propagation</span>.<span class="keyword">REQUIRED</span>)</div></pre></td></tr></table></figure><p>该注解也可添加在方法上，对事物进行更精细化的管理，<strong>注意引用spring包下的，不要引用javax包下的</strong>。</p><h3 id="2、引入xml配置实现事务"><a href="#2、引入xml配置实现事务" class="headerlink" title="2、引入xml配置实现事务"></a>2、引入xml配置实现事务</h3><p>1、 创建com.onecoderspace.transaction.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"</span></span></div><div class="line"><span class="tag"><span class="attr">default-lazy-init</span>=<span class="string">"false"</span> <span class="attr">default-autowire</span>=<span class="string">"no"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 对于service使用annotation声明事物 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">mode</span>=<span class="string">"proxy"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">order</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"do*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.onecoderspace..*.service..*.*(..))"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">order</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><br>2、引入xml配置文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Configuration</span></div><div class="line"><span class="variable">@ImportResource</span>(<span class="string">"classpath:com.onecoderspace.transaction.xml"</span>)</div><div class="line">public class AopTransactionConfig &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><ol><li>service层需要统一添加事务，避免部分人员忘记事务处理，在运行过程中导致数据不一致；</li><li>在每个service上添加注解实现事务：定好项目整体事务隔离级别和传播属性即可在项目级别形成规范，胜在简单，可执行性更高，目前本公司使用该方式；</li><li>在service方法上添加注解实现事务：事务管理更灵活，更有针对性，缺点是难以形成统一规范，依赖编程人员的经验和能力，如果团队内存在经验不很充足的成员不推荐使用该方式；</li><li>通过引入xml配置实现事务：配置简单，在xml内一处配置即可实现事务管理，耦合性更低；缺点就是使用了xml配置，因此不太推荐使用该方式；</li><li>隔离级别（isolation）通常选择REPEATABLE_READ；传播属性通常使用默认值（REQUIRED）即可。</li></ol><h3 id="4、扩展阅读"><a href="#4、扩展阅读" class="headerlink" title="4、扩展阅读"></a>4、扩展阅读</h3><h4 id="隔离级别（isolation）"><a href="#隔离级别（isolation）" class="headerlink" title="隔离级别（isolation）"></a>隔离级别（isolation）</h4><p>隔离级别是指若干个并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读取、重复读、幻读。</p><p>我们可以看 org.springframework.transaction.annotation.Isolation 枚举类中定义了五个表示隔离级别的值：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Isolation</span> &#123;  </span></div><div class="line">    DEFAULT(-<span class="number">1</span>),</div><div class="line">    READ_UNCOMMITTED(<span class="number">1</span>),</div><div class="line">    READ_COMMITTED(<span class="number">2</span>),</div><div class="line">    REPEATABLE_READ(<span class="number">4</span>),</div><div class="line">    SERIALIZABLE(<span class="number">8</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>DEFAULT ：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是： READ_COMMITTED，mysql5.6默认是REPEATABLE-READ，可以通过select @@tx_isolation查看。  </li><li>READ_UNCOMMITTED ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。 </li><li>READ_COMMITTED ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。 </li><li>REPEATABLE_READ ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。  </li><li>SERIALIZABLE ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h4 id="传播属性（propagation）"><a href="#传播属性（propagation）" class="headerlink" title="传播属性（propagation）"></a>传播属性（propagation）</h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。</p><p>我们可以看 org.springframework.transaction.annotation.Propagation 枚举类中定义了6个表示传播行为的枚举值：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Propagation</span> &#123;  </span></div><div class="line">    REQUIRED(<span class="number">0</span>),</div><div class="line">    SUPPORTS(<span class="number">1</span>),</div><div class="line">    MANDATORY(<span class="number">2</span>),</div><div class="line">    REQUIRES_NEW(<span class="number">3</span>),</div><div class="line">    NOT_SUPPORTED(<span class="number">4</span>),</div><div class="line">    NEVER(<span class="number">5</span>),</div><div class="line">    NESTED(<span class="number">6</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>REQUIRED ：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>SUPPORTS ：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>MANDATORY ：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>REQUIRES_NEW ：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>NOT_SUPPORTED ：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>NEVER ：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>NESTED ：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 REQUIRED 。</li></ul><p>如有更好实现方式，敬请指出。</p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事务在项目里也是不可或缺的一部分，建议形成一个统一的事务管理规范，不要出现让程序员根据业务自行添加，团队成员能力有高有低，很容易就出现需要事务时没添加事务，这种问题又很难测试出来，运行时却会不定时出现数据的不一致。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="事务" scheme="http://www.onecoderspace.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端实战：详情页返回列表内容缓存及定位实现</title>
    <link href="http://www.onecoderspace.com/2017/09/26/%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E8%AF%A6%E6%83%85%E9%A1%B5%E8%BF%94%E5%9B%9E%E5%88%97%E8%A1%A8%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98%E5%8F%8A%E5%AE%9A%E4%BD%8D%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.onecoderspace.com/2017/09/26/前端实战：详情页返回列表内容缓存及定位实现/</id>
    <published>2017-09-26T12:45:21.000Z</published>
    <updated>2017-09-26T13:07:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p>当前浏览到第N页，点击某一个新闻，进入新闻详情页，点击返回时，列表数据不重新加载，焦点仍定位在进入详情页之前的位置。<br><a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>缓存列表内已展示的数据；</li><li>进入详情页时在缓存内添加该新闻的ID（键为articleId）；</li><li>返回时在js内判断缓存内是否包含articleId，如果存在，则通过缓存的列表数据进行页面渲染；</li><li>通过articleId定位元素，滚动窗口值该元素处；</li><li>缓存不能始终存在。</li></ol><p>根据当前项目情况，考虑缓存放入sessionStorage，滚动窗口使用IScroll。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>1、缓存列表数据  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cacheKey 缓存key  cacheValue 缓存内容json结构  position 值为before和after分别用于加载最新和加载下一页 </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToCache</span>(<span class="params">cacheKey,cacheValue,position</span>)</span>&#123;</div><div class="line">   cacheValue = <span class="built_in">JSON</span>.stringify(cacheValue);</div><div class="line">   <span class="keyword">var</span> allCacheData = sessionStorage.getItem(cacheKey);</div><div class="line">   <span class="keyword">if</span>(allCacheData != <span class="literal">null</span>)&#123;</div><div class="line">   <span class="keyword">if</span>(position == <span class="string">"before"</span>)&#123;</div><div class="line">   allCacheData = cacheValue + <span class="string">"::::"</span> +allCacheData;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">   allCacheData = allCacheData + <span class="string">"::::"</span> + cacheValue;</div><div class="line">   &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">   allCacheData = cacheValue;</div><div class="line">   &#125;</div><div class="line">   sessionStorage.setItem(cacheKey,allCacheData);    </div><div class="line">   &#125;  </div></pre></td></tr></table></figure><ul><li>sessionStorage只能存储字符串，需要将json结构的对象转为字符串进行存储</li><li>如果列表数据特别多，应该和业务确认缓存数据条数，截取仅是字符串操作，这里不再展开</li></ul><p>2、进入详情页<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".article"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </div><div class="line">     sessionStorage.setItem(<span class="string">"articleId"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"id"</span>));</div><div class="line">   &#125;)  </div></pre></td></tr></table></figure></p><ul><li>在每条新闻上绑定事件，点击时设置文章ID至缓存，正常来说在详情页设置，但是因为这个项目内的详情页不是我们部门的，所以只能在列表页设置；</li></ul><p>3、返回时列表内js判断是从详情页返回的还是一次新的访问<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> articleId = sessionStorage.getItem(<span class="string">"articleId"</span>);</div><div class="line">   <span class="built_in">var</span> cacheData = sessionStorage.getItem($scope.initType);</div><div class="line">   <span class="keyword">if</span>(articleId != <span class="built_in">null</span> &amp;&amp; cacheData != <span class="built_in">null</span>)&#123; <span class="comment">//从详情页返回且列表缓存数据不为空</span></div><div class="line">   showTableDataWithCache(cacheData,articleId);</div><div class="line">   removeCache(<span class="string">"articleId"</span>);<span class="comment">//注意使用一次就清理掉</span></div><div class="line">   &#125;<span class="keyword">else</span> &#123; <span class="comment">//一次新的访问，要清理掉所有相关缓存</span></div><div class="line">   removeAllFuturesCache();</div><div class="line">   loadPage(<span class="number">1</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br>4、定位至对应元素<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">//注意IScroll需要重新初始化</span></div><div class="line"><span class="string">myScroll</span> <span class="string">=</span> <span class="string">new</span> <span class="string">IScroll('#wrapper',</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    probeType:</span> <span class="number">3</span><span class="string">,</span></div><div class="line"><span class="attr">    disableMouse:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    momentum:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    mouseWheel:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    disablePointer:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    click:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    tap:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    resizePolling:</span> <span class="number">1</span><span class="string">,</span></div><div class="line">    <span class="string">//</span> <span class="string">x</span></div><div class="line">  <span class="string">&#125;);</span></div><div class="line"></div><div class="line"><span class="string">//滚动至对应元素</span></div><div class="line"><span class="string">myScroll.scrollToElement(document.querySelector("[id='"+detailArticleId+"']"),10,true,true);</span></div><div class="line"><span class="string">initScroll();</span></div><div class="line"><span class="string">myScroll.refresh();</span>  </div></pre></td></tr></table></figure></p><ul><li>注意IScroll需要重新初始化;</li><li>scrollToElement的选择器格式是[id=’articleId’]而不是正常的”#articleId”;10 是动画时间   true  true这样设置会将元素显示在窗口中间；</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>sessionStorage是单个窗口级的缓存，同一个窗口内的数据可缓存在其内；</li><li>IScroll可以作为页面滚动的组件；</li><li>详情页返回列表不刷新问题可以分解为三个小问题：  <ol><li>缓存列表数据</li><li>添加从详情页返回的标记（文章详情ID）</li><li>用缓存数据渲染页面后滚动窗口至对应元素<br>通过sessionStorage存储数据，这样很多功能都可以实现，比如返回时标签选中等都是一样的思路，进入详情页时设置对应值，在页面加载时判断对应的缓存数据是否存在进而展开业务，这里不再展开。 </li></ol></li></ol><p>参考：<br><a href="http://www.cnblogs.com/yuzhongwusan/archive/2011/12/19/2293347.html" target="_blank" rel="external">sessionStorage介绍</a><br><a href="http://blog.csdn.net/liangklfang/article/details/52804915" target="_blank" rel="external">IScroll使用</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现目标&quot;&gt;&lt;a href=&quot;#实现目标&quot; class=&quot;headerlink&quot; title=&quot;实现目标&quot;&gt;&lt;/a&gt;实现目标&lt;/h2&gt;&lt;p&gt;当前浏览到第N页，点击某一个新闻，进入新闻详情页，点击返回时，列表数据不重新加载，焦点仍定位在进入详情页之前的位置。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.onecoderspace.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.onecoderspace.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="列表数据缓存" scheme="http://www.onecoderspace.com/tags/%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/"/>
    
      <category term="详情页返回列表无刷新" scheme="http://www.onecoderspace.com/tags/%E8%AF%A6%E6%83%85%E9%A1%B5%E8%BF%94%E5%9B%9E%E5%88%97%E8%A1%A8%E6%97%A0%E5%88%B7%E6%96%B0/"/>
    
      <category term="html生成页面无法滚动" scheme="http://www.onecoderspace.com/tags/html%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%BB%9A%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring boot项目实战：跨域问题解决</title>
    <link href="http://www.onecoderspace.com/2017/09/26/spring-boot-cors/"/>
    <id>http://www.onecoderspace.com/2017/09/26/spring-boot-cors/</id>
    <published>2017-09-26T12:44:40.000Z</published>
    <updated>2017-10-01T12:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前后端分离架构，前端anglerjs，后端spring boot,使用shiro作为权限控制，已配置通用跨域请求支持。<br>前端调用接口时部分情况正常，部分情况出现跨域请求不支持情况，错误信息如下：<br><a id="more"></a><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Response <span class="keyword">to</span> preflight request doesn<span class="symbol">'t</span> pass <span class="keyword">access</span> control check: No <span class="symbol">'Access</span>-Control-Allow-Origin' header <span class="keyword">is</span> present <span class="keyword">on</span> the requested resource. Origin <span class="symbol">'xxxx</span>' <span class="keyword">is</span> therefore <span class="keyword">not</span> allowed <span class="keyword">access</span>.</div></pre></td></tr></table></figure>    </p><h3 id="配置错了？"><a href="#配置错了？" class="headerlink" title="配置错了？"></a>配置错了？</h3><p>首先，想到的就是对跨域请求支持的配置是错误的，尝试着替换不同的跨域支持配置，有以下几种：<br>1、继承WebMvcConfigurerAdapter<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class AppConfig extends WebMvcConfigurerAdapter &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</div><div class="line">        registry.addMapping(<span class="string">"/**"</span>)</div><div class="line">                .allowedOrigins(<span class="string">"*"</span>)</div><div class="line">                .allowCredentials(true).allowedHeaders(<span class="string">"Origin, X-Requested-With, Content-Type, Accept"</span>)</div><div class="line">                .allowedMethods(<span class="string">"<span class="keyword">GET</span>"</span>, <span class="string">"<span class="keyword">POST</span>"</span>, <span class="string">"<span class="keyword">DELETE</span>"</span>, <span class="string">"<span class="keyword">PUT</span>"</span>, <span class="string">"<span class="keyword">OPTIONS</span>"</span>)</div><div class="line">                .maxAge(<span class="number">3600</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>2、配置WebMvcConfigurer<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> <span class="function">WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>)</div><div class="line">.allowedMethods(<span class="string">"*"</span>).allowedHeaders(<span class="string">"*"</span>)</div><div class="line">.allowCredentials(<span class="keyword">true</span>)</div><div class="line">.exposedHeaders(HttpHeaders.SET_COOKIE).maxAge(<span class="number">3600</span>L);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>…</p><p><a href="https://spring.io/blog/2015/06/08/cors-support-in-spring-framework" target="_blank" rel="external">CORS support in Spring Framework</a>内的方式都尝试了一遍，发现问题仍然未解决，看到文档内的一个点</p><blockquote><p>If you are using Spring Security, make sure to enable CORS at Spring Security level as well to allow it to leverage the configuration defined at Spring MVC level.</p></blockquote><p>大概意思就是使用Spring Security要进行特殊的配置来支持CORS。而当前项目内使用的是shiro，是不是权限控制导致的问题?检查shiro相关代码，果然找到了问题，在loginFilter内会判断如果未登录，就通过response写回未登录提示，代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Subject </span><span class="keyword">subject </span>= SecurityUtils.getSubject()<span class="comment">;</span></div><div class="line">if (!<span class="keyword">subject.isAuthenticated()) </span>&#123;</div><div class="line">HttpServletResponse resp = (HttpServletResponse) response<span class="comment">;</span></div><div class="line">String contentType = <span class="string">"application/json"</span><span class="comment">;</span></div><div class="line">resp.setContentType(contentType)<span class="comment">;</span></div><div class="line">resp.setCharacterEncoding(<span class="string">"UTF-8"</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">Map&lt;String, String&gt; map = Maps.newLinkedHashMap()<span class="comment">;</span></div><div class="line">map.put(<span class="string">"code"</span>, <span class="string">"xxx"</span>)<span class="comment">;</span></div><div class="line">map.put(<span class="string">"msg"</span>, <span class="string">"xxx"</span>)<span class="comment">;</span></div><div class="line">String result = <span class="keyword">JacksonHelper.toJson(map);</span></div><div class="line"><span class="keyword"></span>PrintWriter out = resp.getWriter()<span class="comment">;</span></div><div class="line">try&#123;</div><div class="line">out.print(result)<span class="comment">;</span></div><div class="line">out.flush()<span class="comment">;</span></div><div class="line">&#125; finally &#123;</div><div class="line">out.<span class="keyword">close();</span></div><div class="line"><span class="keyword"></span>&#125;</div><div class="line">return<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>那就添加上跨域支持<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resp</span><span class="selector-class">.setHeader</span>(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</div><div class="line"><span class="selector-tag">resp</span><span class="selector-class">.setHeader</span>(<span class="string">"Access-Control-Allow-Origin"</span>,request.getHeader(<span class="string">"Origin"</span>));</div></pre></td></tr></table></figure><br>本来以为ok了，但是前端是不报错了，但并不能获得对应接口期望的结果，而是一直收到<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"code"</span>:<span class="string">"xxx"</span>,<span class="attr">"msg"</span>:<span class="string">"xxx"</span>&#125;</div></pre></td></tr></table></figure><br>显然是被登录拦截了，但是明明已经登录，而且有的接口可以正常通过登录拦截，为什么部分接口会出现不能登录的情况呢？  </p><h3 id="明明登录了，为什么被loginFilter拦截？"><a href="#明明登录了，为什么被loginFilter拦截？" class="headerlink" title="明明登录了，为什么被loginFilter拦截？"></a>明明登录了，为什么被loginFilter拦截？</h3><p>遇到了问题就要想办法解决，首先就是怀疑客户端sessionId未被正常保存，在loginFilter内添加日志打印sessionID，发现每次的sessionID都不一样，问题清晰了一些，前端并未正确的保持登录状态，对比前端两个调用接口的代码，发现正常的是get请求，post请求不正常，通过在网上搜索，<strong>发现ajax post跨域请求时，默认是不携带浏览器的cookie的</strong>，也就是每次请求都会生成一个新的session，因此post请求都被登录拦截。解决办法如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">type:<span class="string">"<span class="keyword">POST</span>"</span>,</div><div class="line">url:<span class="string">""</span>,</div><div class="line">data:&#123;&#125;,</div><div class="line">crossDomain:true,</div><div class="line">       xhrFields: &#123;  withCredentials: true  &#125;,</div><div class="line">success:function(data)&#123;</div><div class="line"></div><div class="line">&#125;,</div><div class="line">error:function(data)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><br><strong>配置crossDomain:true 和 xhrFields: {  withCredentials: true  }就可以让请求正常携带cookie。</strong></p><h3 id="一个完整可用方案"><a href="#一个完整可用方案" class="headerlink" title="一个完整可用方案"></a>一个完整可用方案</h3><p>1、配置支持跨域请求（多种方式自由选择，推荐使用下面的方式）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 跨域请求支持</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>)</div><div class="line">.allowedMethods(<span class="string">"*"</span>).allowedHeaders(<span class="string">"*"</span>)</div><div class="line">.allowCredentials(<span class="keyword">true</span>)</div><div class="line">.exposedHeaders(HttpHeaders.SET_COOKIE).maxAge(<span class="number">3600L</span>);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>2、前端ajax post请求时添加xhrFields: {  withCredentials: true  }<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">type:<span class="string">"<span class="keyword">POST</span>"</span>,</div><div class="line">url:<span class="string">""</span>,</div><div class="line">data:&#123;&#125;,</div><div class="line">crossDomain:true,</div><div class="line">       xhrFields: &#123;  withCredentials: true  &#125;,</div><div class="line">success:function(data)&#123;</div><div class="line"></div><div class="line">&#125;,</div><div class="line">error:function(data)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><br>3、检查权限控制代码，看是否有特殊处理的地方，未添加跨域支持。如上文所提，登录拦截直接通过response写回未登录提示；<br>使用spring-security框架时也要添加特殊配置，如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> void configure(<span class="type">HttpSecurity</span> http) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</div><div class="line">http.cors().and()...</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>    </p><blockquote><p>解决跨域的本质就是在返回头内添加Access-Control-Allow-Origin，实现方式有多种，spring体系内解决跨域可参考<a href="https://spring.io/blog/2015/06/08/cors-support-in-spring-framework" target="_blank" rel="external">CORS support in Spring Framework</a>,很全面的介绍了各种场景。使用权限框架时，要注意权限框架本身的CORS支持。</p></blockquote><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;前后端分离架构，前端anglerjs，后端spring boot,使用shiro作为权限控制，已配置通用跨域请求支持。&lt;br&gt;前端调用接口时部分情况正常，部分情况出现跨域请求不支持情况，错误信息如下：&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="CORS" scheme="http://www.onecoderspace.com/tags/CORS/"/>
    
      <category term="跨域" scheme="http://www.onecoderspace.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="ajax post跨域" scheme="http://www.onecoderspace.com/tags/ajax-post%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>sprign boot项目实战：日志</title>
    <link href="http://www.onecoderspace.com/2017/09/26/spring-boot-log/"/>
    <id>http://www.onecoderspace.com/2017/09/26/spring-boot-log/</id>
    <published>2017-09-26T12:43:59.000Z</published>
    <updated>2017-10-01T12:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>日志是运维、排错的一个重要助手，很多人应该都维护过没有日志的项目，知道排查问题是什么感觉。所以搭建基础项目框架时，自然不能少了日志。<br><a id="more"></a></p><h1 id="日志组件选择"><a href="#日志组件选择" class="headerlink" title="日志组件选择"></a>日志组件选择</h1><p>从网上各种搜索对比，在log4j2和logback之间选择了log4j2,综合各处评价，log4j2在性能方法有一定优势。但是在一个项目内使用后就发现，<strong>spring boot内log4j2不支持spring profile机制，也就是在本地环境、测试环境、预发布环境、正式环境需要手动切换配置</strong>，当前公司的多个环境在相同的服务器上，所以这种方式会导致多个环境的日志生成在了同一个文件内，很不利于问题排查。因此又将日志组件换回了logback，<strong>因为对当前公司的项目来说，日志支持profile机制更重要，性能瓶颈绝不在日志这块。</strong>  </p><h1 id="logback配置"><a href="#logback配置" class="headerlink" title="logback配置"></a>logback配置</h1><p>spring boot内配置logback还是很简单的，只需要在src/main/resources目录下创建logback-spring.xml，在xml内添加自己的日志配置即可。支持三个环境local、dev、prod的日志配置如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATH"</span> <span class="attr">value</span>=<span class="string">"/mnt/diskb/logs"</span>/&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"local"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.onecoderspace"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logfile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ssS&#125;</span><span class="xml"> %5p [%c]:%L-%m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.onecoderspace"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logfile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_PATH&#125;</span><span class="xml">/projectName/projectName_dev.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ssS&#125;</span><span class="xml"> %5p [%c</span><span class="template-variable">&#123;5&#125;</span><span class="xml">#%M]:%L-%m%n%caller</span><span class="template-variable">&#123;0&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">prudent</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prudent</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- daily rollover --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_PATH&#125;</span><span class="xml">/projectName/projectName_dev.%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.log.gz</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span></div><div class="line"><span class="xml">    </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.onecoderspace"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logfile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_PATH&#125;</span><span class="xml">/projectName/projectName.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ssS&#125;</span><span class="xml"> %5p [%c</span><span class="template-variable">&#123;5&#125;</span><span class="xml">#%M]:%L-%m%n%caller</span><span class="template-variable">&#123;0&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">prudent</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prudent</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- daily rollover --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;LOG_PATH&#125;</span><span class="xml">/projectName/projectName.%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.log.gz</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"logfile"</span> /&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></div></pre></td></tr></table></figure><br>spring-boot-starter-web内已经包含了logback和slf4j的依赖，所以只要项目依赖了spring-boot-starter-web，就不需要做其他额外的配置了。</p><h1 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h1><p>调用日志时建议使用slf4j，虽然基本不会在后续变更日志组件，但使用slf4j是一个好的习惯。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">LoginController</span>.<span class="keyword">class</span>);</div></pre></td></tr></table></figure><br><strong>debug日志</strong><br>debug日志建议添加logger.isDebugEnabled()判断，在重要的流程上都留下日志，这样当系统出现问题时，可以通过debug日志，快速定位问题，能代替很多断点调试的时间。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span>(logger.isDebugEnabled())&#123;</div><div class="line">logger.<span class="builtin-name">debug</span>(<span class="string">"user=&#123;&#125; login success"</span>,username);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>info日志</strong><br>比较重要的信息，对于系统运行有比较重要的参考意义，同时不会对性能造成影响，可以在正式环境展示的信息，使用info基本打印，如定时任务运行时间等。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.<span class="builtin-name">info</span>(<span class="string">"end fetcher proxy use time=&#123;&#125;"</span>, System.currentTimeMillis()- t);</div></pre></td></tr></table></figure><br><strong>error日志</strong><br>error日志相对来说是最重要的，但使用时需要注意使用方式，不正确的方式会导致很多信息被隐藏。可以参考如下方式：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">logger.<span class="built_in">error</span>(<span class="keyword">String</span>.<span class="keyword">format</span>(<span class="string">"error msg ,arg1=%s,arg2=%s"</span>,arg1,arg2), e);</div></pre></td></tr></table></figure></p><ul><li>尽可能的带上异常发生时的参数，这个对排查问题很有意义</li><li>打印异常的完整堆栈信息，仅打印e.getMessage()会导致很多信息被隐藏</li><li>只在异常发生时或明确的业务错误时使用error，不要用error来打印调试、普通信息</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>spring boot项目内日志组件选择logback比较好，内嵌的日志组件，支持profile机制；</li><li>logback配置方式为在src/main/resources目录下创建logback-spring.xml，配置内容参考上文；</li><li>调用日志时使用slf4j，注意合理使用日志级别</li><li>注意以下几点tips</li></ol><h5 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h5><p>1、 应用日志尽量放在数据盘上，不要放在系统盘上，遇到了不止一次日志写满系统盘导致服务暂停的情况<br>2、 技术负责人定好日志规范，在代码review时指出几次日志使用的问题，能够很快让良好使用日志成为团队的习惯<br>3、 正式环境的日志基本最低为info，通常可以调整为warn或error<br>4、 在while循环内有异常捕获时，注意当异常发生时，不能无限打印日志，如下代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">while</span> (flag) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">byte[] bb = _queue.poll(<span class="number">1</span>, TimeUnit.SECONDS);</div><div class="line"><span class="keyword">if</span> (bb != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; m = JacksonSupport.decode1(<span class="keyword">new</span> ByteArrayInputStream(bb), <span class="built_in">Map</span>.<span class="keyword">class</span>);</div><div class="line">E event = _consumer.getEventType().newInstance();</div><div class="line">event.fromMap(m);</div><div class="line">_consumer.onEvent(event);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">logger.error(<span class="string">"redis queue poll due to error"</span>, e);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>从基于redis开发的一个blockingQueue内获取元素进行消费，代码运行了一年多十分正常，但是有一次几乎把磁盘写满了，因为当时运维调整，redis停掉了， _queue.poll这里就开始抛异常，然后下面就狂写日志，一直把磁盘写满。类似这样的地方，可以进行一个计数，连续错误达到多少次，就终止循环并以某些方式提醒运维人员。<br>5、不要使用System.out.println()，建议隔段时间全局搜索一次，发现了就在小组会议上提一下，很快这种现象就会杜绝  </p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日志是运维、排错的一个重要助手，很多人应该都维护过没有日志的项目，知道排查问题是什么感觉。所以搭建基础项目框架时，自然不能少了日志。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring boot" scheme="http://www.onecoderspace.com/tags/spring-boot/"/>
    
      <category term="日志" scheme="http://www.onecoderspace.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="spring profile" scheme="http://www.onecoderspace.com/tags/spring-profile/"/>
    
  </entry>
  
  <entry>
    <title>spring boot实战</title>
    <link href="http://www.onecoderspace.com/2017/09/25/spring-boot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.onecoderspace.com/2017/09/25/spring-boot项目实战：目录/</id>
    <published>2017-09-25T13:43:52.000Z</published>
    <updated>2017-10-04T11:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近基于spring boot搭建了一套公司后端接口项目基础框架，方便公司后续项目的快速开发。本系列博客从实际开发项目所需功能的角度，逐功能点的讲述实现方式，最终完成一个可以直接用于公司项目开发的基础框架。让大家对于使用spring boot开发项目有一个更直观、全面的认识，也让小伙伴们少踩几个我掉过的坑，更愉快的加入spring boot的阵营。<br><a id="more"></a><br>项目包含的基础功能有：  </p><ol><li>spring boot项目基础结构  </li><li><a href="http://www.onecoderspace.com/2017/10/03/spring-boot-jpa/">spring boot项目实战：JPA</a> </li><li>公共方法提取：service、dao、model  </li><li><a href="http://www.onecoderspace.com/2017/10/02/spring-boot-shiro/">spring-boot项目实战：shiro</a>  </li><li><a href="http://www.onecoderspace.com/2017/09/26/spring-boot-cors/">spring boot项目实战：跨域支持：CORS</a>  </li><li><a href="http://www.onecoderspace.com/2017/10/01/spring-boot-redis/">spring boot项目实战：redis</a> </li><li><a href="http://www.onecoderspace.com/2017/09/26/spring-boot-log/">spring boot项目实战：日志</a>  </li><li><a href="http://www.onecoderspace.com/2017/10/01/spring-boot-transaction/">spring boot项目实战：事务</a>  </li><li>安全：xss、CSRF、SQL注入  </li><li><a href="http://www.onecoderspace.com/2017/10/04/spring-boot-distributed-lock/">spring boot项目实战：分布式锁</a>  </li><li>常用工具类（日期、http、集合操作、文件操作、json、加密、ognl等）   </li><li><a href="http://www.onecoderspace.com/2017/10/01/spring-boot-spring-session/">spring-boot实战：共享session</a>   </li><li><a href="http://www.onecoderspace.com/2017/10/01/spring-boot-swagger2/">spring boot项目实战：swagger2在线文档</a></li><li>代码生成器：code-generator  </li><li>应用监控：Spring Boot Actuator  </li><li>JSP支持  </li></ol><p>额外推荐一个很不错的博客，我入门都是在上面看的。<br><a href="http://blog.didispace.com/" target="_blank" rel="external">程序员DD|博客</a></p><p>本人搭建好的spring boot web后端开发框架已上传至GitHub，欢迎吐槽！<br><a href="https://github.com/q7322068/rest-base" target="_blank">https://github.com/q7322068/rest-base</a>,已用于多个正式项目，当前可能因为版本问题不是很完善，后续持续优化，希望你能有所收获！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近基于spring boot搭建了一套公司后端接口项目基础框架，方便公司后续项目的快速开发。本系列博客从实际开发项目所需功能的角度，逐功能点的讲述实现方式，最终完成一个可以直接用于公司项目开发的基础框架。让大家对于使用spring boot开发项目有一个更直观、全面的认识，也让小伙伴们少踩几个我掉过的坑，更愉快的加入spring boot的阵营。&lt;br&gt;
    
    </summary>
    
      <category term="spring boot实战" scheme="http://www.onecoderspace.com/categories/spring-boot%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="CORS" scheme="http://www.onecoderspace.com/tags/CORS/"/>
    
      <category term="日志" scheme="http://www.onecoderspace.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="redis" scheme="http://www.onecoderspace.com/tags/redis/"/>
    
      <category term="JPA" scheme="http://www.onecoderspace.com/tags/JPA/"/>
    
      <category term="spring-session" scheme="http://www.onecoderspace.com/tags/spring-session/"/>
    
      <category term="事务" scheme="http://www.onecoderspace.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="spring-boot实战" scheme="http://www.onecoderspace.com/tags/spring-boot%E5%AE%9E%E6%88%98/"/>
    
      <category term="web基础框架" scheme="http://www.onecoderspace.com/tags/web%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/"/>
    
      <category term="异常" scheme="http://www.onecoderspace.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="接口文档" scheme="http://www.onecoderspace.com/tags/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    
      <category term="权限控制" scheme="http://www.onecoderspace.com/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="跨域支持" scheme="http://www.onecoderspace.com/tags/%E8%B7%A8%E5%9F%9F%E6%94%AF%E6%8C%81/"/>
    
      <category term="安全" scheme="http://www.onecoderspace.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="xss" scheme="http://www.onecoderspace.com/tags/xss/"/>
    
      <category term="CSRF" scheme="http://www.onecoderspace.com/tags/CSRF/"/>
    
      <category term="缓存" scheme="http://www.onecoderspace.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="分布式锁" scheme="http://www.onecoderspace.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
      <category term="shiro" scheme="http://www.onecoderspace.com/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>web项目高效开发</title>
    <link href="http://www.onecoderspace.com/2017/09/24/%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91/"/>
    <id>http://www.onecoderspace.com/2017/09/24/高效开发/</id>
    <published>2017-09-24T06:26:20.000Z</published>
    <updated>2017-09-24T13:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>从事开发工作五年多，参与、带的项目几十个，中间也思考过怎么提高项目的开发速度和质量，也陆续尝试了一些方法，最近稍有空闲，就系统梳理、自我总结一把，主要有以下几点：  </p><ul><li>理清需求再动手，不要后期需求变更、代码补丁打的自己酸爽无比</li><li>减少模板代码的copy开发，能自动生成的自动生成 </li><li>提取自己公司的模板项目，配合代码生成器生成40%以上的模板代码  </li><li>生成规范可用的文档，减少文档维护工作  </li><li>自动构建部署项目</li><li>规范日志，提升运维效率<br>思路就是“通用的东西进行提取，能自动生成的东西自动生成，让程序员专心写业务代码”。    <a id="more"></a></li></ul><h1 id="1、理清需求"><a href="#1、理清需求" class="headerlink" title="1、理清需求"></a>1、理清需求</h1><p>功能点多，技术难度大对程序员来说正常，加班干活也没啥怨言，完成了心中还有点成就感，但几个功能点翻来覆去的调整个三五次，那90%的人估计都已经在心里问候项目经理了。<br>有些需求变更是难免的，但更多的是可以通过合适的管理、设计来避免的，特别是小公司的技术负责人（如我）更应该注意”想清楚要做什么比立马思考怎么做更重要“，你在开始设计时跑偏一些，忘记一些，就意味着之后的某个时间团队集体狼狈的加班，这里有几点小经验分享给大军：  </p><ul><li>认真阅读需求文档，在心里构画出整个网站的全景图，任何一个分支小道都不忽视</li><li>提出问题，让需求人员想的更多一点</li><li>自己将对需求的认识向需求+团队成员讲一遍</li><li>负责某一模块的团队成员复述一下对需求的认识</li></ul><h1 id="2、项目模板"><a href="#2、项目模板" class="headerlink" title="2、项目模板"></a>2、项目模板</h1><p>项目内有很多底层通用的东西，特别是一个公司内容的项目，不同项目间共性的东西更多，很多时候开发也是copy一个项目，把原来的业务功能删减，有类似功能的再从不同项目里copy过来。这种情况将共性代码提出为一个base项目，后续项目都直接在base项目的基础上开发，明显会更舒爽很多。<br>目前使用spring-boot搭建了一个后端web接口开发的模板项目，后续也会在《spring boot项目实战》系列文章进行分享。</p><h1 id="3、代码生成"><a href="#3、代码生成" class="headerlink" title="3、代码生成"></a>3、代码生成</h1><p>代码生成器的原理就是读取表结构，生成对应的模板代码，所以开发一个项目先进行数据库设计。<br><strong>一、数据库设计</strong><br>有段时间设计数据库使用excel，后面发现修改、维护、查看都不怎么方便，现在在使用免费的workbench进行数据库设计，软件操作还算顺手，能够简单的体现模块、表之间的关系。在这方面根据个人感觉，用着顺手就行，建议使用专业的软件，excel之类的从效果上来说的确有一定的差距。建议每个字段都设置好注释，字段命名多个单词用下划线分割。</p><p><strong>二、代码生成器</strong><br>本人开发了一个代码生成器，功能有：  </p><ol><li>生成指定数据库内所有表对应的模板代码（实体、dao、service、controller）</li><li>生成指定数据库内指定表对应的模板代码（实体、dao、service、controller）<br>原理是通过sql查询数据内有哪些数据库，数据库内有哪些表，表里面的字段信息，然后通过freemarker来生成模板代码，如有需要可根据该项目调整对应的模板生成自己公司的代码。<br>GitHub: <a href="https://github.com/q7322068/code-generation" target="_blank">https://github.com/q7322068/code-generation</a></li></ol><h1 id="4、在线文档生成"><a href="#4、在线文档生成" class="headerlink" title="4、在线文档生成"></a>4、在线文档生成</h1><p>公司项目是前后端分离的架构，刚开始都是通过excel来提供接口文档给前端，后来维护起来实在是太麻烦，调整了就要改excel，多个人维护起来，很快就乱套了，后来决定使用swagger2来构建在线api文档，以代码的形式来维护，代码调整时添加上指定格式的注释就能自动生成接口文档，前端通过在线文档来查看，配合起来更舒服。<br>使用请参考：<br><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="external">Spring Boot中使用Swagger2构建强大的RESTful API文档</a><br><a href="http://blog.didispace.com/spring-boot-starter-swagger-1.1.0/" target="_blank" rel="external">简化Swagger使用的自制Starter：spring-boot-starter-swagger，欢迎使用和吐槽</a><br><a href="http://blog.didispace.com/spring-boot-starter-swagger-1.3.0/" target="_blank" rel="external">spring-boot-starter-swagger 1.3.0.RELEASE：新增对JSR-303的支持和host的配置</a></p><h1 id="5、自动构建"><a href="#5、自动构建" class="headerlink" title="5、自动构建"></a>5、自动构建</h1><p>代码开发好了，总是要在服务器上部署运行的，我现在的公司采用Jenkins来完成自动打包部署，提交svn代码，Jenkins自动打包（支持war包、jar包）部署至测试环境，预发布环境和正式环境基于测试环境的代码进行发布（通过脚本进行发布，实际上就是遍历某个文件夹下的文件，选择后进行copy）。</p><h1 id="6、日志很重要"><a href="#6、日志很重要" class="headerlink" title="6、日志很重要"></a>6、日志很重要</h1><p>刚到现在公司的时候，接手的项目日志千奇百怪，有打印到控制台的，有日志未生效的，有自己写到某个文件的（你没看错），加上项目文档严重缺失，有过类似体验的兄弟知道是啥感觉。所以抽取基础项目时直接定好日志规范，在规定目录下生成日志，日志完备了，日常运维也就简单了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>提取一套基础框架，把该有的组件、工具类都放进去</li><li>设计数据库、代码生成，这样model、dao、service、controller都有了，注意啊比较完备的在线注释已经存在了^_^</li><li>使用Jenkins自动构建发布，部署项目再也不需要自己上去svn up，ps,kill等一系列操作了；</li><li>日志很重要很重要，没日志的日子很难过滴<br>希望这篇文章能诱发点你的“懒病”，每天只写“爽”的代码，想要懒就只能先勤快，为你的开发打造点顺手的武器吧。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从事开发工作五年多，参与、带的项目几十个，中间也思考过怎么提高项目的开发速度和质量，也陆续尝试了一些方法，最近稍有空闲，就系统梳理、自我总结一把，主要有以下几点：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理清需求再动手，不要后期需求变更、代码补丁打的自己酸爽无比&lt;/li&gt;
&lt;li&gt;减少模板代码的copy开发，能自动生成的自动生成 &lt;/li&gt;
&lt;li&gt;提取自己公司的模板项目，配合代码生成器生成40%以上的模板代码  &lt;/li&gt;
&lt;li&gt;生成规范可用的文档，减少文档维护工作  &lt;/li&gt;
&lt;li&gt;自动构建部署项目&lt;/li&gt;
&lt;li&gt;规范日志，提升运维效率&lt;br&gt;思路就是“通用的东西进行提取，能自动生成的东西自动生成，让程序员专心写业务代码”。
    
    </summary>
    
      <category term="java实战" scheme="http://www.onecoderspace.com/categories/java%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="java实战 spirng-boot 项目高效开发 自动构建 代码生成" scheme="http://www.onecoderspace.com/tags/java%E5%AE%9E%E6%88%98-spirng-boot-%E9%A1%B9%E7%9B%AE%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
</feed>
